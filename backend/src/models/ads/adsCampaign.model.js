import mongoose from "mongoose";

const adsCampaignSchema = new mongoose.Schema(
  {
    // Li√™n k·∫øt v·ªõi c·ª≠a h√†ng
    shop_id: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "Shop",
      required: false,
      default: null,
    },

    // Li√™n k·∫øt v·ªõi t√†i kho·∫£n qu·∫£ng c√°o (lu√¥n b·∫Øt bu·ªôc)
    account_id: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "AdsAccount",
      required: true,
    },

    // ID t√†i kho·∫£n tr√™n Facebook (act_xxx)
    external_account_id: {
      type: String,
      index: true,
      trim: true,
    },

    // ID chi·∫øn d·ªãch tr√™n Facebook (c√≥ sau khi publish)
    external_id: { type: String, trim: true },

    // T√™n chi·∫øn d·ªãch
    name: { type: String, required: true, trim: true },

    // Th√¥ng tin trang Page ch·∫°y qu·∫£ng c√°o
    page_id: { type: String, trim: true, default: null },
    page_name: { type: String, trim: true, default: null },

    // C·∫•u h√¨nh chi·∫øn d·ªãch
    objective: { type: String, trim: true },
    buying_type: { type: String, default: "AUCTION" },
    bid_strategy: { type: String, trim: true },

    // Ng√¢n s√°ch
    daily_budget: { type: Number, min: 0 },
    lifetime_budget: { type: Number, min: 0 },
    spend_cap: { type: Number, default: null },

    // ƒê·ªëi t∆∞·ª£ng & g·∫Øn nh√£n
    promoted_object: { type: mongoose.Schema.Types.Mixed, default: {} },
    adlabels: { type: [mongoose.Schema.Types.Mixed], default: [] },

    start_time: { type: Date },
    stop_time: { type: Date },

    // Tr·∫°ng th√°i
    status: {
      type: String,
      enum: ["PAUSED", "ACTIVE", "DELETED", "ARCHIVED", "DRAFT", "FAILED"],
      default: "DRAFT",
    },
    configured_status: { type: String },
    effective_status: { type: String },

    // üß≠ Orchestrator helpers
    // publish_request_id ƒë·ªÉ tr√°nh tr√πng khi g·ª≠i request publish ‚Äî c√≥ th·ªÉ null
    publish_request_id: { type: String, trim: true, default: null },
    wizard_id: { type: mongoose.Schema.Types.ObjectId, default: null },

    // Meta & audit
    meta: { type: mongoose.Schema.Types.Mixed, default: {} },
    created_by: { type: mongoose.Schema.Types.ObjectId, ref: "User" },
    updated_by: { type: mongoose.Schema.Types.ObjectId, ref: "User" },
    deleted_at: { type: Date, default: null },
  },
  { timestamps: { createdAt: "created_at", updatedAt: "updated_at" } }
);

// ===== Indexes =====

// external_id ch·ªâ unique khi c√≥ gi√° tr·ªã th·∫≠t (tr√°nh tr√πng null)
adsCampaignSchema.index(
  { external_id: 1 },
  {
    unique: true,
    partialFilterExpression: { external_id: { $exists: true, $ne: null } },
  }
);

// publish_request_id ‚Äî cho ph√©p nhi·ªÅu null, ch·ªâ unique khi c√≥ gi√° tr·ªã th·∫≠t
adsCampaignSchema.index(
  { publish_request_id: 1 },
  {
    unique: true,
    partialFilterExpression: {
      publish_request_id: { $exists: true, $ne: null },
    },
  }
);

// C√°c index b·ªï tr·ª£ t√¨m ki·∫øm
adsCampaignSchema.index({ shop_id: 1 });
adsCampaignSchema.index({ account_id: 1 });
adsCampaignSchema.index({ status: 1 });
adsCampaignSchema.index({ page_id: 1 });

const AdsCampaign = mongoose.model("AdsCampaign", adsCampaignSchema);
export default AdsCampaign;
