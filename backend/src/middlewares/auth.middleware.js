import { verifyAccessToken } from '../utils/jwt.js';
import User from '../models/user.model.js';
import UserRole from '../models/userRole.model.js';
import Role from '../models/role.model.js';

/**
 * üß© Middleware x√°c th·ª±c Access Token
 */
export const authenticate = async (req, res, next) => {
  try {
    const authHeader = req.headers.authorization;
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      return res.status(401).json({ success: false, message: 'Token kh√¥ng ƒë∆∞·ª£c cung c·∫•p.' });
    }

    const token = authHeader.split(' ')[1];

    // Verify JWT
    const decoded = verifyAccessToken(token);

    // L·∫•y th√¥ng tin user
    const user = await User.findById(decoded.id).select('-password -facebookAccessToken -facebookRefreshToken');

    if (!user || user.deleted_at) {
      return res.status(401).json({ success: false, message: 'Token kh√¥ng h·ª£p l·ªá ho·∫∑c ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i.' });
    }

    if (user.status !== 'active') {
      return res.status(403).json({ success: false, message: 'T√†i kho·∫£n ch∆∞a ƒë∆∞·ª£c k√≠ch ho·∫°t ho·∫∑c ƒë√£ b·ªã kh√≥a.' });
    }

    if (!user.emailVerified) {
      return res.status(403).json({
        success: false,
        message: 'Vui l√≤ng x√°c nh·∫≠n email tr∆∞·ªõc khi truy c·∫≠p h·ªá th·ªëng.',
        code: 'EMAIL_NOT_VERIFIED',
      });
    }

    req.user = user;
    next();
  } catch (error) {
    if (error.name === 'JsonWebTokenError') {
      return res.status(401).json({ success: false, message: 'Token kh√¥ng h·ª£p l·ªá.' });
    }
    if (error.name === 'TokenExpiredError') {
      return res.status(401).json({ success: false, message: 'Token ƒë√£ h·∫øt h·∫°n.' });
    }
    console.error('Auth middleware error:', error);
    return res.status(500).json({ success: false, message: 'L·ªói x√°c th·ª±c h·ªá th·ªëng.' });
  }
};

/**
 * üß© Middleware x√°c th·ª±c Access Token cho SSE (t·ª´ query parameter)
 */
export const authenticateSSE = async (req, res, next) => {
  try {
    const token = req.query.token;
    if (!token) {
      return res.status(401).json({ success: false, message: 'Token kh√¥ng ƒë∆∞·ª£c cung c·∫•p.' });
    }

    // Verify JWT
    const decoded = verifyAccessToken(token);

    // L·∫•y th√¥ng tin user
    const user = await User.findById(decoded.id).select('-password -facebookAccessToken -facebookRefreshToken');

    if (!user || user.deleted_at) {
      return res.status(401).json({ success: false, message: 'Token kh√¥ng h·ª£p l·ªá ho·∫∑c ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i.' });
    }

    if (user.status !== 'active') {
      return res.status(403).json({ success: false, message: 'T√†i kho·∫£n ch∆∞a ƒë∆∞·ª£c k√≠ch ho·∫°t ho·∫∑c ƒë√£ b·ªã kh√≥a.' });
    }

    if (!user.emailVerified) {
      return res.status(403).json({
        success: false,
        message: 'Vui l√≤ng x√°c nh·∫≠n email tr∆∞·ªõc khi truy c·∫≠p h·ªá th·ªëng.',
        code: 'EMAIL_NOT_VERIFIED',
      });
    }

    req.user = user;
    next();
  } catch (error) {
    if (error.name === 'JsonWebTokenError') {
      return res.status(401).json({ success: false, message: 'Token kh√¥ng h·ª£p l·ªá.' });
    }
    if (error.name === 'TokenExpiredError') {
      return res.status(401).json({ success: false, message: 'Token ƒë√£ h·∫øt h·∫°n.' });
    }
    console.error('SSE Auth middleware error:', error);
    return res.status(500).json({ success: false, message: 'L·ªói x√°c th·ª±c h·ªá th·ªëng.' });
  }
};

/**
 * üì® Middleware ki·ªÉm tra email ƒë√£ x√°c minh
 */
export const requireEmailVerification = (req, res, next) => {
  if (!req.user?.emailVerified) {
    return res.status(403).json({
      success: false,
      message: 'Vui l√≤ng x√°c nh·∫≠n email tr∆∞·ªõc khi s·ª≠ d·ª•ng t√≠nh nƒÉng n√†y.',
      code: 'EMAIL_NOT_VERIFIED',
    });
  }
  next();
};

/**
 * üîí Middleware ki·ªÉm tra quy·ªÅn truy c·∫≠p
 * @param {String} moduleName - T√™n module (v√≠ d·ª•: "campaign", "ads", "shop")
 * @param {String} action - H√†nh ƒë·ªông c·ª• th·ªÉ (v√≠ d·ª•: "create", "update", "delete", "view")
 */
export const authorize = (moduleName, action) => {
  return async (req, res, next) => {
    try {
      const userId = req.user._id;
      const shopId = req.headers['x-shop-id'] || req.query.shop_id || null;

      const hasPermission = await UserRole.hasPermission(userId, shopId, moduleName, action);

      if (!hasPermission) {
        return res.status(403).json({
          success: false,
          message: `B·∫°n kh√¥ng c√≥ quy·ªÅn ${action} tr√™n module ${moduleName}.`,
        });
      }

      next();
    } catch (error) {
      console.error('Authorization error:', error);
      return res.status(500).json({
        success: false,
        message: 'L·ªói ki·ªÉm tra ph√¢n quy·ªÅn h·ªá th·ªëng.',
      });
    }
  };
};
