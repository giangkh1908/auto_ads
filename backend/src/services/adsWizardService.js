import AdsCampaign from "../models/ads/adsCampaign.model.js";
import AdsSet from "../models/ads/adsSet.model.js";
import Ads from "../models/ads/ads.model.js";
import Creative from "../models/ads/creative.model.js";
import {
  createCampaign,
  createAdSet,
  createCreative,
  createAd,
  deleteEntity,
  updateCampaign,
  updateAdset,
  updateAd,
} from "./fbAdsService.js";
import axios from "axios";

/* =========================
 *  HELPER FUNCTIONS
 * ========================= */

/**
 * Helper function: Ch·∫°y promises v·ªõi gi·ªõi h·∫°n concurrency
 * @param {Array} tasks - M·∫£ng c√°c async functions
 * @param {number} limit - S·ªë l∆∞·ª£ng tasks ch·∫°y ƒë·ªìng th·ªùi t·ªëi ƒëa
 */
async function runWithConcurrencyLimit(tasks, limit = 8) {
  const localResults = [];
  const batches = [];

  // Chia tasks th√†nh c√°c batches
  for (let i = 0; i < tasks.length; i += limit) {
    batches.push(tasks.slice(i, i + limit));
  }

  // Ch·∫°y t·ª´ng batch tu·∫ßn t·ª±, nh∆∞ng trong batch th√¨ song song
  for (let batchIndex = 0; batchIndex < batches.length; batchIndex++) {
    const batch = batches[batchIndex];
    console.log(
      `üîÑ X·ª≠ l√Ω batch ${batchIndex + 1}/${batches.length} (${batch.length} items)...`
    );

    const batchResults = await Promise.all(batch.map((task) => task()));
    localResults.push(...batchResults);

    const successCount = batchResults.filter((r) => r?.success !== false).length;
    console.log(
      `‚úÖ Batch ${batchIndex + 1} ho√†n th√†nh: ${successCount}/${batch.length} th√†nh c√¥ng`
    );
  }

  return localResults;
}

/**
 * Helper: T√¨m entity hi·ªán c√≥ trong DB theo _id, draftId, ho·∫∑c external_id
 */
async function findExistingEntity(entity, Model) {
  if (!entity) return null;
  
  // Priority 1: T√¨m theo _id ho·∫∑c draftId
  if (entity._id || entity.draftId) {
    const found = await Model.findById(entity._id || entity.draftId);
    if (found) return found;
  }
  
  // Priority 2: T√¨m theo external_id
  if (entity.external_id) {
    const found = await Model.findOne({ external_id: entity.external_id });
    if (found) return found;
  }
  
  return null;
}

/* =========================
 *  UPDATE OR CREATE HELPERS
 * ========================= */

/**
 * Update ho·∫∑c t·∫°o m·ªõi Campaign
 */
async function updateOrCreateCampaign({ 
  campaign, 
  ad_account_id, 
  access_token 
}) {
  const now = new Date();
  const existingCampaign = await findExistingEntity(campaign, AdsCampaign);
  
  if (existingCampaign) {
    console.log(`üîÑ Updating existing campaign: ${existingCampaign.name} (${existingCampaign._id})`);
    
    // Build updates (ch·ªâ c√°c field ƒë∆∞·ª£c ph√©p update)
    const updates = {
      ...(campaign.name && { name: campaign.name }),
      ...(campaign.status && { status: campaign.status }),
      ...(campaign.daily_budget !== undefined && { daily_budget: campaign.daily_budget }),
      ...(campaign.lifetime_budget !== undefined && { lifetime_budget: campaign.lifetime_budget }),
      ...(campaign.start_time && { start_time: campaign.start_time }),
      ...(campaign.stop_time && { stop_time: campaign.stop_time }),
      updated_at: now,
    };
    
    // Update tr√™n Facebook n·∫øu c√≥ external_id
    if (existingCampaign.external_id) {
      try {
        await updateCampaign(existingCampaign.external_id, access_token, updates);
      } catch (fbError) {
        console.warn(`‚ö†Ô∏è Facebook update campaign failed:`, fbError.response?.data || fbError.message);
        // Continue v·ªõi DB update ngay c·∫£ khi Facebook fail
      }
    }
    
    // Update trong MongoDB
    await AdsCampaign.findByIdAndUpdate(existingCampaign._id, updates);
    
    return { 
      action: 'updated',
      campaignId: existingCampaign.external_id,
      campaignDbId: existingCampaign._id,
      success: true,
    };
  } else {
    // CREATE new campaign
    console.log(`‚ûï Creating new campaign: ${campaign.name}`);
    return await publishCampaignService({
      ad_account_id,
      access_token,
      campaign,
      campaignDraftId: campaign.draftId,
    });
  }
}

/**
 * Update ho·∫∑c t·∫°o m·ªõi AdSet
 */
async function updateOrCreateAdset({ 
  adset, 
  campaignId,
  campaignDbId,
  ad_account_id, 
  access_token 
}) {
  const now = new Date();
  const existingAdset = await findExistingEntity(adset, AdsSet);
  
  if (existingAdset) {
    console.log(`üîÑ Updating existing adset: ${existingAdset.name} (${existingAdset._id})`);
    
    // Build updates
    const updates = {
      ...(adset.name && { name: adset.name }),
      // ...(adset.status && { status: adset.status }),
      ...(adset.daily_budget !== undefined && { daily_budget: adset.daily_budget }),
      ...(adset.lifetime_budget !== undefined && { lifetime_budget: adset.lifetime_budget }),
      ...(adset.end_time && { end_time: adset.end_time }),
      ...(adset.targeting && { targeting: adset.targeting }),
      ...(adset.optimization_goal && { optimization_goal: adset.optimization_goal }),
      ...(adset.bid_strategy && { bid_strategy: adset.bid_strategy }),
      ...(adset.bid_amount !== undefined && { bid_amount: adset.bid_amount }),
      ...(adset.billing_event && { billing_event: adset.billing_event }),
      ...(adset.conversion_event && { conversion_event: adset.conversion_event }),
      updated_at: now,
    };
    
    // Update tr√™n Facebook n·∫øu c√≥ external_id
    if (existingAdset.external_id) {
      try {
        await updateAdset(existingAdset.external_id, access_token, updates);
      } catch (fbError) {
        console.warn(`‚ö†Ô∏è Facebook update adset failed:`, fbError.response?.data || fbError.message);
      }
    }
    
    // Update trong MongoDB
    await AdsSet.findByIdAndUpdate(existingAdset._id, updates);
    
    return { 
      action: 'updated',
      adsetId: existingAdset.external_id,
      adsetDbId: existingAdset._id,
      success: true,
    };
  } else {
    // CREATE new adset
    console.log(`‚ûï Creating new adset: ${adset.name}`);
    return await publishAdsetService({
      ad_account_id,
      access_token,
      campaignId,
      campaignDbId,
      adset,
      adsetDraftId: adset.draftId,
    });
  }
}

/**
 * Update ho·∫∑c t·∫°o m·ªõi Ad
 * NOTE: Creative KH√îNG th·ªÉ update - ch·ªâ t·∫°o m·ªõi n·∫øu creative thay ƒë·ªïi
 */
async function updateOrCreateAd({ 
  ad, 
  adsetId,
  adsetDbId,
  ad_account_id, 
  access_token 
}) {
  const now = new Date();
  const existingAd = await findExistingEntity(ad, Ads);
  
  if (existingAd) {
    console.log(`üîÑ Updating existing ad: ${existingAd.name} (${existingAd._id})`);
    
    // Build updates (Ad ch·ªâ update ƒë∆∞·ª£c name v√† status)
    const updates = {
      ...(ad.name && { name: ad.name }),
      ...(ad.status && { status: ad.status }),
      updated_at: now,
    };
    
    // ‚ö†Ô∏è IMPORTANT: Facebook KH√îNG cho update creative
    // N·∫øu creative thay ƒë·ªïi, c·∫ßn t·∫°o ad m·ªõi (kh√¥ng implement ·ªü ƒë√¢y ƒë·ªÉ gi·ªØ metrics)
    
    // Update tr√™n Facebook n·∫øu c√≥ external_id
    if (existingAd.external_id) {
      try {
        await updateAd(existingAd.external_id, access_token, updates);
      } catch (fbError) {
        console.warn(`‚ö†Ô∏è Facebook update ad failed:`, fbError.response?.data || fbError.message);
      }
    }
    
    // Update trong MongoDB
    await Ads.findByIdAndUpdate(existingAd._id, updates);
    
    return { 
      action: 'updated',
      adId: existingAd.external_id,
      adDbId: existingAd._id,
      success: true,
    };
  } else {
    // CREATE new ad
    console.log(`‚ûï Creating new ad: ${ad.name}`);
    return await publishAdService({
      ad_account_id,
      access_token,
      adsetId,
      adsetDbId,
      creative: ad.creative,
      ad,
      adDraftId: ad.draftId,
      creativeDraftId: ad.creative?.draftId || ad.creative?._id, // ‚úÖ TH√äM creative draft ID
    });
  }
}

/**
 * üß© Publish to√†n b·ªô quy tr√¨nh t·∫°o qu·∫£ng c√°o Wizard
 * (Campaign ‚Üí Ad Set ‚Üí Creative ‚Üí Ad)
 */
export async function publishWizard({
  ad_account_id,
  access_token,
  campaign,
  adset,
  creative,
  ad,
  dry_run = false,
  campaignDraftId,
  adsetDraftId,
  creativeDraftId,
  adDraftId,
}) {
  const steps = [];
  let fbCampaignId, fbAdSetId, fbCreativeId, fbAdId;
  const now = new Date();

  // üß± 1) Kh·ªüi t·∫°o draft (nh√°p) v·ªõi ƒë·∫ßy ƒë·ªß th√¥ng tin
  const draftCamp = campaignDraftId
    ? await AdsCampaign.findById(campaignDraftId)
    : await AdsCampaign.create({
        name: campaign?.name,
        objective: campaign?.objective,
        status: "DRAFT",
        account_id: campaign?.account_id,
        shop_id: campaign?.shop_id,
        page_id: campaign?.page_id,
        page_name: campaign?.page_name,
        daily_budget: campaign?.daily_budget,
        lifetime_budget: campaign?.lifetime_budget,
        start_time: campaign?.start_time,
        stop_time: campaign?.stop_time,
        created_by: campaign?.created_by,
      });

  const draftSet = adsetDraftId
    ? await AdsSet.findById(adsetDraftId)
    : await AdsSet.create({
        campaign_id: draftCamp._id,
        name: adset?.name,
        status: "DRAFT",
        optimization_goal: adset?.optimization_goal,
        conversion_event: adset?.conversion_event,
        billing_event: adset?.billing_event,
        bid_strategy: adset?.bid_strategy,
        bid_amount: adset?.bid_amount,
        targeting: adset?.targeting,
        traffic_destination: adset?.traffic_destination || adset?.destination_type || null,
        daily_budget: adset?.daily_budget,
        lifetime_budget: adset?.lifetime_budget,
        start_time: adset?.start_time,
        end_time: adset?.end_time,
        created_by: adset?.created_by,
      });

  const draftCreative = creativeDraftId
    ? await Creative.findById(creativeDraftId)
    : await Creative.create({
        name: creative?.name,
        title: creative?.object_story_spec?.link_data?.name,
        body: creative?.object_story_spec?.link_data?.message,
        creative_type: "LINK",
        page_id: creative?.object_story_spec?.page_id || null,
        object_story_spec: creative?.object_story_spec,
        cta: creative?.object_story_spec?.link_data?.call_to_action?.type,
        created_by: creative?.created_by,
      });

  const draftAd = adDraftId
    ? await Ads.findById(adDraftId)
    : await Ads.create({
        set_id: draftSet._id,
        account_id: campaign?.account_id,
        name: ad?.name,
        creative_id: draftCreative._id,
        status: "DRAFT",
        created_by: ad?.created_by,
      });

  try {
    // üß† Validate c∆° b·∫£n
    if (!campaign?.name || !campaign?.objective) {
      throw new Error(
        "Thi·∫øu d·ªØ li·ªáu chi·∫øn d·ªãch (campaign.name ho·∫∑c objective)."
      );
    }
    if (!adset?.name) {
      throw new Error("Thi·∫øu t√™n nh√≥m qu·∫£ng c√°o (adset.name).");
    }
    if (!creative?.object_story_spec) {
      throw new Error("Thi·∫øu n·ªôi dung creative.object_story_spec.");
    }
    if (!ad?.name) {
      throw new Error("Thi·∫øu t√™n qu·∫£ng c√°o (ad.name).");
    }
    if (!ad_account_id) {
      throw new Error("Thi·∫øu ad_account_id.");
    }
    if (!access_token) {
      throw new Error("Thi·∫øu access_token.");
    }

    // üöÄ 2) Campaign
    if (dry_run) {
      fbCampaignId = "dry_" + Date.now();
      console.log(`[DRY RUN] Campaign gi·∫£: ${campaign.name}`);
    } else {
      fbCampaignId = await createCampaign(ad_account_id, access_token, {
        ...campaign,
        status: campaign?.status || "PAUSED",
        special_ad_categories: campaign?.special_ad_categories || ["NONE"],
      });
      steps.push(async () => deleteEntity(fbCampaignId, access_token));
    }

    // L∆∞u Campaign v√†o database
    console.log(
      `üíæ L∆∞u Campaign v√†o database: ${draftCamp._id} -> ${fbCampaignId}`
    );
    await AdsCampaign.findByIdAndUpdate(draftCamp._id, {
      external_id: fbCampaignId,
      external_account_id: ad_account_id,
      status: "PAUSED",
      synced_at: now,
      updated_at: now,
    });

    // üöÄ 3) Ad Set
    if (dry_run) {
      fbAdSetId = "dry_" + (Date.now() + 1);
      console.log(`[DRY RUN] AdSet gi·∫£: ${adset.name}`);
    } else {
      console.log(`üöÄ T·∫°o AdSet tr√™n Facebook: ${adset.name}`);
      console.log("üìã AdSet data:", {
        name: adset.name,
        optimization_goal: adset.optimization_goal,
        conversion_event: adset.conversion_event,
        billing_event: adset.billing_event,
        bid_strategy: adset.bid_strategy,
        bid_amount: adset.bid_amount,
      });

      fbAdSetId = await createAdSet(ad_account_id, access_token, {
        ...adset,
        campaign_id: fbCampaignId,
        status: adset?.status || "PAUSED",
        bid_strategy: adset?.bid_strategy || "LOWEST_COST_WITH_BID_CAP",
        bid_amount: adset?.bid_amount || 1000,
        billing_event: adset?.billing_event || "IMPRESSIONS", // Th√™m billing_event b·∫Øt bu·ªôc
      });
      steps.push(async () => deleteEntity(fbAdSetId, access_token));
    }

    // L∆∞u AdSet v√†o database
    console.log(`üíæ L∆∞u AdSet v√†o database: ${draftSet._id} -> ${fbAdSetId}`);
    await AdsSet.findByIdAndUpdate(draftSet._id, {
      external_id: fbAdSetId,
      external_account_id: ad_account_id,
      status: "PAUSED",
      optimization_goal: adset.optimization_goal,
      conversion_event: adset.conversion_event,
      billing_event: adset.billing_event,
      synced_at: now,
      updated_at: now,
    });

    // üöÄ 4) Creative
    if (dry_run) {
      fbCreativeId = "dry_" + (Date.now() + 2);
      console.log(`[DRY RUN] Creative gi·∫£: ${creative.name}`);
    } else {
      fbCreativeId = await createCreative(
        ad_account_id,
        access_token,
        creative
      );
      steps.push(async () => deleteEntity(fbCreativeId, access_token));
    }

    // L∆∞u Creative v√†o database
    console.log(
      `üíæ L∆∞u Creative v√†o database: ${draftCreative._id} -> ${fbCreativeId}`
    );
    await Creative.findByIdAndUpdate(draftCreative._id, {
      external_id: fbCreativeId,
      synced_at: now,
      updated_at: now,
    });

    // üöÄ 5) Ad
    if (dry_run) {
      fbAdId = "dry_" + (Date.now() + 3);
      console.log(`[DRY RUN] Ad gi·∫£: ${ad.name}`);
    } else {
      fbAdId = await createAd(ad_account_id, access_token, {
        ...ad,
        adset_id: fbAdSetId,
        creative: { creative_id: fbCreativeId },
        status: ad?.status || "PAUSED",
      });
      steps.push(async () => deleteEntity(fbAdId, access_token));
    }

    // L∆∞u Ad v√†o database
    console.log(`üíæ L∆∞u Ad v√†o database: ${draftAd._id} -> ${fbAdId}`);
    await Ads.findByIdAndUpdate(draftAd._id, {
      external_id: fbAdId,
      external_account_id: ad_account_id,
      status: "PAUSED",
      synced_at: now,
      updated_at: now,
    });

    // üéÅ 6) Return d·ªØ li·ªáu ƒë·∫ßy ƒë·ªß cho FE
    console.log(
      `‚úÖ Ho√†n th√†nh l∆∞u t·∫•t c·∫£ qu·∫£ng c√°o v√†o database: Campaign(${fbCampaignId}), AdSet(${fbAdSetId}), Creative(${fbCreativeId}), Ad(${fbAdId})`
    );
    return {
      success: true,
      message: dry_run
        ? "Dry run th√†nh c√¥ng (ch∆∞a publish th·∫≠t)"
        : "Publish th√†nh c√¥ng v√† ƒë√£ l∆∞u v√†o database.",
      campaign: {
        id: fbCampaignId,
        name: campaign.name,
        status: campaign.status || "PAUSED",
        objective: campaign.objective,
        budget: campaign.daily_budget || campaign.lifetime_budget || "0",
        spend: 0,
        impressions: 0,
        reach: 0,
        results: 0,
        quality_ranking: null,
        synced_at: now,
      },
      adset: {
        id: fbAdSetId,
        name: adset.name,
        status: adset.status || "PAUSED",
        budget: adset.daily_budget || adset.lifetime_budget || "0",
        spend: 0,
        impressions: 0,
        reach: 0,
        results: 0,
        quality_ranking: null,
        synced_at: now,
      },
      ad: {
        id: fbAdId,
        name: ad.name,
        status: ad.status || "PAUSED",
        spend: 0,
        impressions: 0,
        reach: 0,
        results: 0,
        quality_ranking: null,
        synced_at: now,
      },
      creative: {
        id: fbCreativeId,
        page_id: creative?.object_story_spec?.page_id || null,
        name: creative?.name,
      },
      drafts: {
        campaign: draftCamp._id,
        adset: draftSet._id,
        creative: draftCreative._id,
        ad: draftAd._id,
      },
    };
  } catch (err) {
    console.error("‚ùå Wizard Publish Error:", err.message);
    // Rollback Saga
    for (let i = steps.length - 1; i >= 0; i--) {
      try {
        await steps[i]();
      } catch (rollbackErr) {
        console.warn("‚ö†Ô∏è Rollback step failed:", rollbackErr.message);
      }
    }

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i draft fail
    const errMeta = { "meta.last_error": err?.message, status: "FAILED" };
    await Promise.all([
      Ads.findByIdAndUpdate(draftAd._id, errMeta),
      AdsSet.findByIdAndUpdate(draftSet._id, errMeta),
      AdsCampaign.findByIdAndUpdate(draftCamp._id, errMeta),
    ]);

    throw err;
  }
}

/**
 * üß† Update wizard (Campaign ‚Üí AdSet ‚Üí Creative ‚Üí Ad)
 */
export async function updateWizard({
  ad_account_id,
  access_token,
  campaign,
  adset,
  creative,
  ad,
  dry_run = false,
}) {
  const FB_API = "https://graph.facebook.com/v23.0";
  const now = new Date();
  const result = {};

  async function fbUpdate(entityId, body, type) {
    if (!entityId || dry_run) {
      console.log(`‚ö™ Skip ${type} update (no external_id or dry_run)`);
      return false;
    }
    try {
      console.log(`üîµ Updating ${type} on Facebook:`, entityId);
      await axios.post(`${FB_API}/${entityId}`, body, {
        params: { access_token },
      });
      return true;
    } catch (e) {
      console.warn(
        `‚ö†Ô∏è Facebook ${type} update failed:`,
        e.response?.data || e.message
      );
      return false;
    }
  }

  // ‚úÖ Campaign
  if (campaign) {
    const { external_id, draftId, ...rawFields } = campaign;
    // Whitelist updateable fields for Campaign
    const fields = {
      ...(rawFields?.name ? { name: rawFields.name } : {}),
      ...(rawFields?.status ? { status: rawFields.status } : {}),
    };
    if (external_id && Object.keys(fields).length > 0) {
      await fbUpdate(external_id, fields, "campaign");
    }
    const updated =
      (draftId &&
        (await AdsCampaign.findByIdAndUpdate(
          draftId,
          { ...fields, updated_at: now },
          { new: true }
        ))) ||
      (await AdsCampaign.findOneAndUpdate(
        { external_id },
        { ...fields, updated_at: now },
        { new: true }
      ));
    result.campaign = updated;
  }

  // ‚úÖ AdSet
  if (adset) {
    const { external_id, draftId, ...rawFields } = adset;
    // Prepare promoted_object merge (ensure page_id if provided separately)
    const mergedPromotedObject = {
      ...(rawFields?.promoted_object || {}),
      ...(rawFields?.facebookPageId ? { page_id: rawFields.facebookPageId } : {}),
    };

    // Whitelist updateable fields for AdSet (DB fields only)
    const fields = {
      ...(rawFields?.name ? { name: rawFields.name } : {}),
      ...(rawFields?.status ? { status: rawFields.status } : {}),
      ...(rawFields?.daily_budget
        ? { daily_budget: rawFields.daily_budget }
        : {}),
      ...(rawFields?.lifetime_budget
        ? { lifetime_budget: rawFields.lifetime_budget }
        : {}),
      ...(rawFields?.start_time ? { start_time: rawFields.start_time } : {}),
      ...(rawFields?.end_time ? { end_time: rawFields.end_time } : {}),
      ...(rawFields?.targeting ? { targeting: rawFields.targeting } : {}),
      ...(rawFields?.optimization_goal
        ? { optimization_goal: rawFields.optimization_goal }
        : {}),
      ...(rawFields?.conversion_event
        ? { conversion_event: rawFields.conversion_event }
        : {}),
      ...(rawFields?.billing_event
        ? { billing_event: rawFields.billing_event }
        : {}),
      ...(rawFields?.bid_strategy
        ? { bid_strategy: rawFields.bid_strategy }
        : {}),
      ...(rawFields?.bid_amount ? { bid_amount: rawFields.bid_amount } : {}),
      ...(Object.keys(mergedPromotedObject).length
        ? { promoted_object: mergedPromotedObject }
        : {}),
      ...(rawFields?.pixel_id ? { pixel_id: rawFields.pixel_id } : {}),
      ...(rawFields?.traffic_destination
        ? { traffic_destination: rawFields.traffic_destination }
        : {}),
    };
    let fbAdSetId = external_id;

    if (!fbAdSetId) {
      console.log("‚ö™ AdSet ch∆∞a c√≥ external_id ‚Üí t·∫°o m·ªõi tr√™n Facebook...");
      try {
        const newAdSet = await createAdSet(ad_account_id, access_token, {
          ...adset,
          campaign_id: campaign?.external_id,
          bid_strategy: adset?.bid_strategy || "LOWEST_COST_WITH_BID_CAP",
          bid_amount: adset?.bid_amount || 1000,
          billing_event: adset?.billing_event || "IMPRESSIONS", // Th√™m billing_event b·∫Øt bu·ªôc
        });
        fbAdSetId = newAdSet?.id || newAdSet;
        if (fbAdSetId)
          await AdsSet.findByIdAndUpdate(draftId, { external_id: fbAdSetId });
      } catch (err) {
        console.error(
          "‚ùå Kh√¥ng th·ªÉ t·∫°o l·∫°i AdSet:",
          err.response?.data || err.message
        );
      }
    }

    if (fbAdSetId && Object.keys(fields).length > 0) {
      // Facebook payload may include destination_type derived from traffic_destination
      const fbFields = {
        ...fields,
        ...(rawFields?.traffic_destination
          ? { destination_type: rawFields.traffic_destination }
          : {}),
      };
      const ok = await fbUpdate(fbAdSetId, fbFields, "adset");
      if (!ok) {
        console.log("‚ö†Ô∏è Update adset th·∫•t b·∫°i ‚Üí th·ª≠ t·∫°o m·ªõi l·∫°i...");
        const newAdSet = await createAdSet(ad_account_id, access_token, {
          ...adset,
          campaign_id: campaign?.external_id,
          bid_strategy: adset?.bid_strategy || "LOWEST_COST_WITH_BID_CAP",
          bid_amount: adset?.bid_amount || 1000,
          billing_event: adset?.billing_event || "IMPRESSIONS",
        });
        fbAdSetId = newAdSet?.id || newAdSet;
        await AdsSet.findByIdAndUpdate(draftId, { external_id: fbAdSetId });
      }
    }

    const updated =
      (draftId &&
        (await AdsSet.findByIdAndUpdate(
          draftId,
          { ...fields, updated_at: now, external_id: fbAdSetId },
          { new: true }
        ))) ||
      (await AdsSet.findOneAndUpdate(
        { external_id: fbAdSetId },
        { ...fields, updated_at: now },
        { new: true }
      )) ||
      (await AdsSet.findOneAndUpdate(
        { campaign_id: campaign?.draftId || campaign?._id },
        { ...fields, updated_at: now },
        { new: true }
      ));
    result.adset = updated;
  }

  // ‚úÖ Creative
  if (creative) {
    const { external_id, draftId, ...fields } = creative;
    let fbCreativeId = external_id;

    if (!fbCreativeId) {
      console.log(
        "‚ö™ Creative ch∆∞a c√≥ external_id ‚Üí t·∫°o m·ªõi l·∫°i tr√™n Facebook..."
      );
      try {
        const newCreative = await createCreative(ad_account_id, access_token, {
          ...creative,
          name: `${creative.name || "Creative"}_${Date.now()}`, // ‚úÖ ƒë·∫£m b·∫£o unique
        });
        fbCreativeId = newCreative?.id || newCreative;
        if (fbCreativeId)
          await Creative.findByIdAndUpdate(draftId, {
            external_id: fbCreativeId,
          });
      } catch (err) {
        console.error(
          "‚ùå Kh√¥ng th·ªÉ t·∫°o l·∫°i creative:",
          err.response?.data || err.message
        );
      }
    }

    if (fbCreativeId) await fbUpdate(fbCreativeId, fields, "creative");

    const updated =
      (draftId &&
        (await Creative.findByIdAndUpdate(
          draftId,
          { ...fields, updated_at: now, external_id: fbCreativeId },
          { new: true }
        ))) ||
      (await Creative.findOneAndUpdate(
        { external_id: fbCreativeId },
        { ...fields, updated_at: now },
        { new: true }
      ));
    result.creative = updated;
  }

  // ‚úÖ Ad
  if (ad) {
    const { external_id, draftId, ...fields } = ad;
    let fbAdId = external_id;

    if (!fbAdId && adset?.external_id && creative?.external_id) {
      console.log("‚ö™ Ad ch∆∞a c√≥ external_id ‚Üí t·∫°o m·ªõi tr√™n Facebook...");
      try {
        const newAd = await createAd(ad_account_id, access_token, {
          ...ad,
          name: ad.name || "Qu·∫£ng c√°o m·ªõi",
          adset_id: adset.external_id,
          creative: { creative_id: creative.external_id },
          status: ad?.status || "PAUSED",
        });
        fbAdId = newAd?.id || newAd;
        if (fbAdId)
          await Ads.findByIdAndUpdate(draftId, { external_id: fbAdId });
      } catch (err) {
        console.error(
          "‚ùå Kh√¥ng th·ªÉ t·∫°o l·∫°i Ad:",
          err.response?.data || err.message
        );
      }
    }

    if (fbAdId) await fbUpdate(fbAdId, fields, "ad");

    const updated =
      (draftId &&
        (await Ads.findByIdAndUpdate(
          draftId,
          { ...fields, updated_at: now, external_id: fbAdId },
          { new: true }
        ))) ||
      (await Ads.findOneAndUpdate(
        { external_id: fbAdId },
        { ...fields, updated_at: now },
        { new: true }
      )) ||
      (await Ads.findOneAndUpdate(
        { set_id: adset?.draftId || adset?._id },
        { ...fields, updated_at: now },
        { new: true }
      ));
    result.ad = updated;
  }

  return result;
}

// ========================================
// üéØ NEW FLEXIBLE SERVICES FOR DIFFERENT MODELS
// ========================================

/**
 * üéØ Service t·∫°o Campaign ri√™ng bi·ªát
 * H·ªó tr·ª£ m√¥ h√¨nh: 1-1-1, 1-nhi·ªÅu-nhi·ªÅu, nhi·ªÅu-nhi·ªÅu-nhi·ªÅu
 */
export async function publishCampaignService({
  ad_account_id,
  access_token,
  campaign,
  dry_run = false,
  campaignDraftId,
}) {
  const now = new Date();
  let fbCampaignId;

  // üß± 1) Kh·ªüi t·∫°o draft (nh√°p) v·ªõi ƒë·∫ßy ƒë·ªß th√¥ng tin
  const draftCamp = campaignDraftId
    ? await AdsCampaign.findById(campaignDraftId)
    : await AdsCampaign.create({
        name: campaign?.name,
        objective: campaign?.objective,
        status: "DRAFT",
        account_id: campaign?.account_id,
        shop_id: campaign?.shop_id,
        page_id: campaign?.page_id,
        page_name: campaign?.page_name,
        daily_budget: campaign?.daily_budget,
        lifetime_budget: campaign?.lifetime_budget,
        start_time: campaign?.start_time,
        stop_time: campaign?.stop_time,
        created_by: campaign?.created_by,
      });

  try {
    // üß† Validate c∆° b·∫£n
    if (!campaign?.name || !campaign?.objective) {
      throw new Error(
        "Thi·∫øu d·ªØ li·ªáu chi·∫øn d·ªãch (campaign.name ho·∫∑c objective)."
      );
    }
    if (!ad_account_id) {
      throw new Error("Thi·∫øu ad_account_id.");
    }
    if (!access_token) {
      throw new Error("Thi·∫øu access_token.");
    }

    // üöÄ 2) T·∫°o Campaign tr√™n Facebook
    if (dry_run) {
      fbCampaignId = "dry_" + Date.now();
      console.log(`[DRY RUN] Campaign gi·∫£: ${campaign.name}`);
    } else {
      const campaignPayload = {
        name: campaign.name,
        objective: campaign.objective,
        status: campaign?.status || "PAUSED",
        special_ad_categories: campaign?.special_ad_categories || ["NONE"],
        // Th√™m c√°c field kh√°c n·∫øu c·∫ßn
        ...(campaign.daily_budget && { daily_budget: campaign.daily_budget }),
        ...(campaign.lifetime_budget && {
          lifetime_budget: campaign.lifetime_budget,
        }),
        ...(campaign.start_time && { start_time: campaign.start_time }),
        ...(campaign.stop_time && { stop_time: campaign.stop_time }),
      };

      console.log(`üì§ Campaign Payload g·ª≠i Facebook:`, JSON.stringify(campaignPayload, null, 2));
      fbCampaignId = await createCampaign(
        ad_account_id,
        access_token,
        campaignPayload
      );
    }

    // L∆∞u Campaign v√†o database
    console.log(
      `üíæ L∆∞u Campaign v√†o database: ${draftCamp._id} -> ${fbCampaignId}`
    );
    await AdsCampaign.findByIdAndUpdate(draftCamp._id, {
      external_id: fbCampaignId,
      external_account_id: ad_account_id,
      status: "PAUSED",
      synced_at: now,
      updated_at: now,
    });

    return {
      success: true,
      campaignId: fbCampaignId, // Facebook Campaign ID
      campaignDbId: draftCamp._id, // MongoDB _id (ƒë·ªÉ d√πng cho AdSet)
      draftId: draftCamp._id, // Gi·ªØ l·∫°i ƒë·ªÉ t∆∞∆°ng th√≠ch
      message: `Campaign "${campaign.name}" ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng`,
    };
  } catch (error) {
    console.error("‚ùå L·ªói t·∫°o Campaign:", error);
    throw error;
  }
}

/**
 * üéØ Service t·∫°o AdSet cho Campaign ƒë√£ c√≥
 * H·ªó tr·ª£ m√¥ h√¨nh: 1-nhi·ªÅu-nhi·ªÅu, nhi·ªÅu-nhi·ªÅu-nhi·ªÅu
 */
export async function publishAdsetService({
  ad_account_id,
  access_token,
  campaignId, // ID c·ªßa campaign ƒë√£ t·∫°o
  campaignDbId, // MongoDB _id c·ªßa campaign
  adset,
  dry_run = false,
  adsetDraftId,
}) {
  const now = new Date();
  let fbAdSetId;

  // üß± 1) Kh·ªüi t·∫°o draft (nh√°p) v·ªõi ƒë·∫ßy ƒë·ªß th√¥ng tin
  const draftSet = adsetDraftId
    ? await AdsSet.findById(adsetDraftId)
    : await AdsSet.create({
        campaign_id: campaignDbId, // MongoDB _id c·ªßa campaign
        name: adset?.name,
        status: "DRAFT",
        optimization_goal: adset?.optimization_goal,
        billing_event: adset?.billing_event,
        bid_strategy: adset?.bid_strategy,
        bid_amount: adset?.bid_amount,
        daily_budget: adset?.daily_budget,
        lifetime_budget: adset?.lifetime_budget,
        start_time: adset?.start_time,
        end_time: adset?.end_time,
        targeting: adset?.targeting,
        conversion_event: adset?.conversion_event,
        pixel_id: adset?.pixel_id,
        created_by: adset?.created_by,
      });

  try {
    // üß† Validate c∆° b·∫£n
    if (!adset?.name) {
      throw new Error("Thi·∫øu t√™n nh√≥m qu·∫£ng c√°o (adset.name).");
    }
    if (!campaignId) {
      throw new Error("Thi·∫øu campaignId.");
    }
    if (!ad_account_id) {
      throw new Error("Thi·∫øu ad_account_id.");
    }
    if (!access_token) {
      throw new Error("Thi·∫øu access_token.");
    }

    // üöÄ 2) T·∫°o AdSet tr√™n Facebook
    if (dry_run) {
      fbAdSetId = "dry_" + (Date.now() + 1);
      console.log(`[DRY RUN] AdSet gi·∫£: ${adset.name}`);
    } else {
      console.log(`üöÄ T·∫°o AdSet tr√™n Facebook: ${adset.name}`);
      
      // Build promoted_object theo b·∫£ng ODAX v23.0
      // C√°c tr∆∞·ªùng: page_id, pixel_id, custom_event_type, application_id, object_store_url, event_id
      let promotedObject = null;
      
      if (adset.promoted_object) {
        const obj = { ...adset.promoted_object };
        
        // X√≥a c√°c field null/undefined ƒë·ªÉ tr√°nh g·ª≠i l√™n Facebook
        Object.keys(obj).forEach(key => {
          if (obj[key] === null || obj[key] === undefined) {
            delete obj[key];
          }
        });
        
        // Ch·ªâ g·ª≠i promoted_object n·∫øu c√≥ √≠t nh·∫•t 1 field h·ª£p l·ªá
        if (Object.keys(obj).length > 0) {
          promotedObject = obj;
        }
      }
      
      // Ch·ªâ g·ª≠i c√°c field c·∫ßn thi·∫øt cho Facebook AdSet API
      const adsetPayload = {
        name: adset.name,
        campaign_id: campaignId,
        status: adset?.status || "PAUSED",
        optimization_goal: adset.optimization_goal,
        billing_event: adset.billing_event,
        bid_strategy: adset.bid_strategy || "LOWEST_COST_WITHOUT_CAP",
        ...(adset.daily_budget && { daily_budget: adset.daily_budget }),
        ...(adset.lifetime_budget && {
          lifetime_budget: adset.lifetime_budget,
        }),
        ...(adset.targeting && { targeting: adset.targeting }),
        ...(adset.start_time && { start_time: adset.start_time }),
        ...(adset.end_time && { end_time: adset.end_time }),
        ...(promotedObject && { promoted_object: promotedObject }),
        ...(adset.pixel_id && { pixel_id: adset.pixel_id }),
        ...(adset.conversion_event && { conversion_event: adset.conversion_event }),
        // ODAX: destination_type cho OUTCOME_ENGAGEMENT
        ...(adset.destination_type && { destination_type: adset.destination_type }),
      };

      console.log(`üì§ Payload g·ª≠i Facebook:`, JSON.stringify(adsetPayload, null, 2));
      fbAdSetId = await createAdSet(ad_account_id, access_token, adsetPayload);
    }

    // L∆∞u AdSet v√†o database
    console.log(`üíæ L∆∞u AdSet v√†o database: ${draftSet._id} -> ${fbAdSetId}`);
    await AdsSet.findByIdAndUpdate(draftSet._id, {
      external_id: fbAdSetId,
      external_account_id: ad_account_id,
      status: "PAUSED",
      optimization_goal: adset.optimization_goal,
      conversion_event: adset.conversion_event,
      billing_event: adset.billing_event,
      synced_at: now,
      updated_at: now,
    });

    return {
      success: true,
      adsetId: fbAdSetId, // Facebook AdSet ID
      adsetDbId: draftSet._id, // MongoDB _id
      draftId: draftSet._id, // Gi·ªØ l·∫°i ƒë·ªÉ t∆∞∆°ng th√≠ch
      message: `AdSet "${adset.name}" ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng`,
    };
  } catch (error) {
    console.error("‚ùå L·ªói t·∫°o AdSet:", error);
    if (error.response?.data) {
      console.error("üìã Facebook API Error Details:", JSON.stringify(error.response.data, null, 2));
    }
    throw error;
  }
}

/**
 * üéØ Service t·∫°o Ad cho AdSet ƒë√£ c√≥
 * H·ªó tr·ª£ m√¥ h√¨nh: 1-1-1, 1-nhi·ªÅu-nhi·ªÅu, nhi·ªÅu-nhi·ªÅu-nhi·ªÅu
 */
export async function publishAdService({
  ad_account_id,
  access_token,
  adsetId, // ID c·ªßa adset ƒë√£ t·∫°o
  adsetDbId, // MongoDB _id c·ªßa adset
  creative, // Object creative
  ad, // Object ad
  dry_run = false, 
  adDraftId, // MongoDB _id c·ªßa ad
  creativeDraftId, // MongoDB _id c·ªßa creative
}) {
  const now = new Date();
  let fbCreativeId, fbAdId;

  // üß± 1) T√¨m ho·∫∑c t·∫°o draft creative
  let draftCreative;
  
  if (creativeDraftId) {
    console.log(`üîç T√¨m creative draft v·ªõi ID: ${creativeDraftId}`);
    draftCreative = await Creative.findById(creativeDraftId);
    
    // Ch·ªâ update n·∫øu creative ch∆∞a ƒë∆∞·ª£c publish (ch∆∞a c√≥ external_id)
    if (draftCreative && !draftCreative.external_id) {
      console.log(`‚úèÔ∏è Update creative draft: ${creativeDraftId}`);
      await Creative.findByIdAndUpdate(creativeDraftId, {
        name: creative?.name,
        object_story_spec: creative?.object_story_spec,
        updated_at: now,
      });
      draftCreative = await Creative.findById(creativeDraftId);
    } else if (draftCreative && draftCreative.external_id) {
      // N·∫øu creative ƒë√£ publish, kh√¥ng th·ªÉ update ‚Üí t·∫°o m·ªõi
      console.log(`‚ö†Ô∏è Creative ƒë√£ publish (${draftCreative.external_id}), t·∫°o m·ªõi...`);
      draftCreative = null; // Force t·∫°o m·ªõi
    }
  }
  
  if (!draftCreative) {
    console.log(`‚ûï T·∫°o m·ªõi creative draft`);
    draftCreative = await Creative.create({
      adset_id: adsetDbId, // MongoDB _id c·ªßa adset
      name: creative?.name,
      object_story_spec: creative?.object_story_spec,
      created_by: creative?.created_by,
    });
  }

  const draftAd = adDraftId
    ? await Ads.findById(adDraftId)
    : await Ads.create({
        set_id: adsetDbId, // MongoDB _id c·ªßa adset
        name: ad?.name,
        creative_id: draftCreative._id,
        status: "DRAFT",
        created_by: ad?.created_by,
      });

  try {
    // üß† Validate c∆° b·∫£n
    if (!creative?.object_story_spec) {
      throw new Error("Thi·∫øu n·ªôi dung creative.object_story_spec.");
    }
    if (!ad?.name) {
      throw new Error("Thi·∫øu t√™n qu·∫£ng c√°o (ad.name).");
    }
    if (!adsetId) {
      throw new Error("Thi·∫øu adsetId.");
    }
    if (!ad_account_id) {
      throw new Error("Thi·∫øu ad_account_id.");
    }
    if (!access_token) {
      throw new Error("Thi·∫øu access_token.");
    }

    // 2) T·∫°o Creative tr√™n Facebook
    if (dry_run) {
      fbCreativeId = "dry_" + (Date.now() + 2);
      console.log(`[DRY RUN] Creative gi·∫£: ${creative.name}`);
    } else {
      // Validate: Creative PH·∫¢I C√ì page_id h·ª£p l·ªá (kh√¥ng ph·∫£i placeholder)
      const creativePageId = creative?.object_story_spec?.page_id;
      if (!creativePageId || creativePageId === "fb_page_id_placeholder") {
        throw new Error(
          `‚ùå Creative kh√¥ng c√≥ page_id h·ª£p l·ªá. Nh·∫≠n ƒë∆∞·ª£c: "${creativePageId}". ` +
          `Vui l√≤ng ch·ªçn Facebook Page tr∆∞·ªõc khi t·∫°o Ad.`
        );
      }
      
      // T·∫°o Creative tr∆∞·ªõc
      fbCreativeId = await createCreative(
        ad_account_id,
        access_token,
        creative
      );
      console.log(`Creative ƒë√£ t·∫°o: ${fbCreativeId}`);
    }

    // üöÄ 3) T·∫°o Ad tr√™n Facebook
    if (dry_run) {
      fbAdId = "dry_" + (Date.now() + 3);
      console.log(`[DRY RUN] Ad gi·∫£: ${ad.name}`);
    } else {
      // Ch·ªâ g·ª≠i c√°c field c·∫ßn thi·∫øt cho Facebook Ad API
      const adPayload = {
        name: ad.name,
        adset_id: adsetId,
        creative: { creative_id: fbCreativeId }, // ƒê√£ c√≥ fbCreativeId
        status: ad?.status || "PAUSED",
        ...(ad.destination_url && { destination_url: ad.destination_url }),
      };

      fbAdId = await createAd(ad_account_id, access_token, adPayload);
      console.log(`Ad ƒë√£ t·∫°o: ${fbAdId}`);
    }

    // L∆∞u Creative v√†o database
    console.log(
      `L∆∞u Creative v√†o database: ${draftCreative._id} -> ${fbCreativeId}`
    );
    await Creative.findByIdAndUpdate(draftCreative._id, {
      external_id: fbCreativeId,
      status: "PAUSED",
      synced_at: now,
      updated_at: now,
    });

    // L∆∞u Ad v√†o database
    console.log(`L∆∞u Ad v√†o database: ${draftAd._id} -> ${fbAdId}`);
    await Ads.findByIdAndUpdate(draftAd._id, {
      external_id: fbAdId,
      external_account_id: ad_account_id,
      creative_id: draftCreative._id, // ‚úÖ Link v·ªõi creative
      status: "PAUSED",
      synced_at: now,
      updated_at: now,
    });

    return {
      success: true,
      adId: fbAdId,
      adDbId: draftAd._id,
      creativeId: fbCreativeId,
      creativeDbId: draftCreative._id, // ‚úÖ Tr·∫£ v·ªÅ ƒë·ªÉ frontend bi·∫øt
      draftId: draftAd._id,
      message: `Ad "${ad.name}" ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng`,
    };
  } catch (error) {
    console.error("L·ªói t·∫°o Ad:", error);
    throw error;
  }
}

/**
 * Service t·∫°o to√†n b·ªô c·∫•u tr√∫c linh ho·∫°t
 * H·ªó tr·ª£ t·∫•t c·∫£ m√¥ h√¨nh: 1-1-1, 1-nhi·ªÅu-nhi·ªÅu, nhi·ªÅu-nhi·ªÅu-nhi·ªÅu
 */
export async function publishFlexibleService({
  ad_account_id,
  access_token,
  campaignsList, // Array of campaigns with nested adsets and ads
  dry_run = false,
}) {
  const results = {
    campaigns: [],
    adsets: [],
    ads: [],
    totalSuccess: 0,
    totalErrors: 0,
    errors: [],
  };

  // üîç LOG RECEIVED PAYLOAD
  console.log("\nüîç ========== RECEIVED PAYLOAD IN BACKEND ==========");
  console.log("üìä Total Campaigns:", campaignsList.length);
  campaignsList.forEach((campaign, cIdx) => {
    console.log(`\nüìã Campaign ${cIdx + 1}: ${campaign.name}`);
    console.log(`  AdSets: ${campaign.adsets?.length || 0}`);
    campaign.adsets?.forEach((adset, aIdx) => {
      console.log(`    üì¶ AdSet ${aIdx + 1}: ${adset.name}`);
      console.log(`      Ads: ${adset.ads?.length || 0}`);
      adset.ads?.forEach((ad, adIdx) => {
        console.log(`        üìù Ad ${adIdx + 1}: ${ad.name}`);
      });
    });
  });
  console.log("====================================================\n");

  try {
    //X·ª≠ l√Ω t·ª´ng campaign
    for (
      let campaignIndex = 0;
      campaignIndex < campaignsList.length;
      campaignIndex++
    ) {
      const campaign = campaignsList[campaignIndex];

      try {
        //B∆∞·ªõc 1: T·∫°o Campaign
        const campaignPayload = {
          ad_account_id,
          access_token,
          campaign,
          dry_run,
          campaignDraftId: campaign.draftId,
        };

        const campaignResult = await publishCampaignService(campaignPayload);
        results.campaigns.push(campaignResult);

        // B∆∞·ªõc 2: T·∫°o AdSets SONG SONG (gi·ªõi h·∫°n 8 c√πng l√∫c)
        console.log(
          `B·∫Øt ƒë·∫ßu t·∫°o ${campaign.adsets.length} AdSets cho Campaign "${campaign.name}"...`
        );

        // T·∫°o tasks cho m·ªói AdSet
        const adsetTasks = campaign.adsets.map(
          (adset, adsetIndex) => async () => {
            const startTime = Date.now();

            try {
              // 2.1: T·∫°o AdSet
              const adsetPayload = {
                ad_account_id,
                access_token,
                campaignId: campaignResult.campaignId, // Facebook Campaign ID
                campaignDbId: campaignResult.campaignDbId, // MongoDB _id
                adset,
                dry_run,
                adsetDraftId: adset.draftId,
              };

              console.log(
                ` [${adsetIndex + 1}/${campaign.adsets.length}] T·∫°o AdSet: "${adset.name}"...`
              );
              const adsetResult = await publishAdsetService(adsetPayload);
              results.adsets.push(adsetResult);
              console.log(
                `AdSet "${adset.name}" ƒë√£ t·∫°o (ID: ${adsetResult.adsetId})`
              );

              // 2.2: T·∫°o Ads TU·∫¶N T·ª∞ cho AdSet n√†y (v√¨ ph·ª• thu·ªôc creative)
              if (adset.ads && adset.ads.length > 0) {
                console.log(
                  `üé® B·∫Øt ƒë·∫ßu t·∫°o ${adset.ads.length} Ads cho AdSet "${adset.name}"...`
                );
                console.log(`   AdSet._id: ${adset._id || 'undefined'}`);
                console.log(`   Ads in adset:`, adset.ads.map(ad => ({ name: ad.name, adset_id: ad.adset_id })));

                for (let adIndex = 0; adIndex < adset.ads.length; adIndex++) {
                  const ad = adset.ads[adIndex];

                  try {
                    console.log(
                      `   üìù [${adIndex + 1}/${adset.ads.length}] T·∫°o Ad: "${ad.name}"...`
                    );
                    console.log(`      Ad.adset_id: ${ad.adset_id || 'undefined'}`);
                    
                    const adPayload = {
                      ad_account_id,
                      access_token,
                      adsetId: adsetResult.adsetId, // Facebook AdSet ID
                      adsetDbId: adsetResult.adsetDbId, // MongoDB _id
                      creative: ad.creative,
                      ad,
                      dry_run,
                      adDraftId: ad.draftId,
                      creativeDraftId: ad.creative?.draftId || ad.creative?._id, // ‚úÖ TH√äM creative draft ID
                    };

                    const adResult = await publishAdService(adPayload);
                    results.ads.push(adResult);
                    results.totalSuccess++;
                    console.log(
                      `      ‚úÖ Ad "${ad.name}" ƒë√£ t·∫°o (ID: ${adResult.adId})`
                    );
                  } catch (adError) {
                    console.error(
                      `   L·ªói t·∫°o Ad "${ad.name}":`,
                      adError.response?.data || adError.message
                    );
                    results.totalErrors++;
                    results.errors.push({
                      type: "ad",
                      campaignIndex,
                      adsetIndex,
                      adIndex,
                      error: adError.response?.data?.error?.message || adError.message,
                      error_user_msg: adError.response?.data?.error?.error_user_msg || 
                                     adError.response?.data?.error_user_msg || 
                                     adError.response?.data?.error?.message || 
                                     adError.message,
                      errorDetails: adError.response?.data,
                      name: ad.name,
                      adsetName: adset.name,
                    });
                  }
                }
              }

              const duration = ((Date.now() - startTime) / 1000).toFixed(2);
              console.log(
                `AdSet "${adset.name}" ho√†n th√†nh trong ${duration}s`
              );

              return {
                success: true,
                adsetIndex,
                adsetName: adset.name,
                adsCreated: adset.ads?.length || 0,
                duration,
              };
            } catch (adsetError) {
              const duration = ((Date.now() - startTime) / 1000).toFixed(2);
              console.error(
                `L·ªói t·∫°o AdSet "${adset.name}" sau ${duration}s:`,
                adsetError.message
              );
              if (adsetError.response?.data) {
                console.error("üìã Facebook API Error:", JSON.stringify(adsetError.response.data, null, 2));
              }
              results.totalErrors++;
              results.errors.push({
                type: "adset",
                campaignIndex,
                adsetIndex,
                error: adsetError.message,
                error_user_msg: adsetError.response?.data?.error?.error_user_msg || 
                               adsetError.response?.data?.error_user_msg || 
                               adsetError.response?.data?.error?.message || 
                               adsetError.message,
                errorDetails: adsetError.response?.data,
                name: adset.name,
                campaignName: campaign.name,
              });

              return {
                success: false,
                adsetIndex,
                adsetName: adset.name,
                error: adsetError.message,
                duration,
              };
            }
          }
        );

        // Ch·∫°y t·∫•t c·∫£ AdSet tasks v·ªõi gi·ªõi h·∫°n 8 c√πng l√∫c
        const campaignStartTime = Date.now();
        const adsetResults = await runWithConcurrencyLimit(adsetTasks, 8);
        const campaignDuration = (
          (Date.now() - campaignStartTime) /
          1000
        ).toFixed(2);

        // Log t·ªïng k·∫øt
        const successfulAdsets = adsetResults.filter((r) => r.success).length;
        const failedAdsets = adsetResults.filter((r) => !r.success).length;
        const totalAdsCreated = adsetResults.reduce(
          (sum, r) => sum + (r.adsCreated || 0),
          0
        );
        console.log(`Campaign "${campaign.name}" ho√†n th√†nh trong ${campaignDuration}s`);
      } catch (campaignError) {
        console.error(
          `L·ªói t·∫°o Campaign "${campaign.name}":`,
          campaignError.message
        );
        results.totalErrors++;
        results.errors.push({
          type: "campaign",
          campaignIndex,
          error: campaignError.message,
          error_user_msg: campaignError.response?.data?.error?.error_user_msg || 
                         campaignError.response?.data?.error_user_msg || 
                         campaignError.response?.data?.error?.message || 
                         campaignError.message,
          errorDetails: campaignError.response?.data,
          name: campaign.name,
        });
      }
    }

    return {
      success: results.totalErrors === 0,
      ...results,
      message: `T·∫°o th√†nh c√¥ng ${results.totalSuccess} qu·∫£ng c√°o trong ${campaignsList.length} chi·∫øn d·ªãch`,
    };
  } catch (error) {
    console.error("L·ªói t·ªïng th·ªÉ:", error);
    throw error;
  }
}

/**
 * üîÑ UPDATE: Flexible service cho cascade update
 * H·ªó tr·ª£ update nhi·ªÅu campaigns v·ªõi c·∫•u tr√∫c linh ho·∫°t (gi·ªëng publishFlexibleService)
 * Update matching entities, t·∫°o m·ªõi n·∫øu ch∆∞a c√≥
 */
export async function updateFlexibleService({
  ad_account_id,
  access_token,
  campaignsList, // Array of campaigns v·ªõi nested adsets v√† ads
}) {
  const results = {
    campaigns: [],
    adsets: [],
    ads: [],
    totalUpdated: 0,
    totalCreated: 0,
    totalErrors: 0,
    errors: [],
    details: {
      updated: { campaigns: [], adsets: [], ads: [] },
      created: { campaigns: [], adsets: [], ads: [] },
    },
  };

  try {
    // X·ª≠ l√Ω t·ª´ng campaign
    for (
      let campaignIndex = 0;
      campaignIndex < campaignsList.length;
      campaignIndex++
    ) {
      const campaign = campaignsList[campaignIndex];

      try {
        // B∆∞·ªõc 1: Update ho·∫∑c t·∫°o Campaign
        console.log(`Processing campaign ${campaignIndex + 1}/${campaignsList.length}: ${campaign.name}`);
        
        const campaignResult = await updateOrCreateCampaign({
          campaign,
          ad_account_id,
          access_token,
        });
        
        results.campaigns.push(campaignResult);
        
        // Track action
        if (campaignResult.action === 'updated') {
          results.totalUpdated++;
          results.details.updated.campaigns.push(campaignResult);
        } else {
          results.totalCreated++;
          results.details.created.campaigns.push(campaignResult);
        }

        // B∆∞·ªõc 2: X·ª≠ l√Ω AdSets v·ªõi concurrency limit (8)
        console.log(
          `\nProcessing ${campaign.adsets?.length || 0} AdSets cho Campaign "${campaign.name}"...`
        );

        const adsetTasks = (campaign.adsets || []).map(
          (adset, adsetIndex) => async () => {
            const startTime = Date.now();

            try {
              // 2.1: Update ho·∫∑c t·∫°o AdSet
              console.log(
                ` [${adsetIndex + 1}/${campaign.adsets.length}] Processing AdSet: "${adset.name}"...`
              );
              
              const adsetResult = await updateOrCreateAdset({
                adset,
                campaignId: campaignResult.campaignId,
                campaignDbId: campaignResult.campaignDbId,
                ad_account_id,
                access_token,
              });
              
              results.adsets.push(adsetResult);
              
              // Track action
              if (adsetResult.action === 'updated') {
                results.details.updated.adsets.push(adsetResult);
              } else {
                results.details.created.adsets.push(adsetResult);
              }
              
              console.log(
                `   ${adsetResult.action === 'updated' ? 'üîÑ Updated' : '‚ûï Created'} AdSet "${adset.name}" (ID: ${adsetResult.adsetId})`
              );

              // 2.2: X·ª≠ l√Ω Ads TU·∫¶N T·ª∞ cho AdSet n√†y
              if (adset.ads && adset.ads.length > 0) {
                console.log(
                  `   üé® Processing ${adset.ads.length} Ads cho AdSet "${adset.name}"...`
                );

                for (let adIndex = 0; adIndex < adset.ads.length; adIndex++) {
                  const ad = adset.ads[adIndex];

                  try {
                    console.log(
                      `     [${adIndex + 1}/${adset.ads.length}] Processing Ad: "${ad.name}"...`
                    );
                    
                    const adResult = await updateOrCreateAd({
                      ad,
                      adsetId: adsetResult.adsetId,
                      adsetDbId: adsetResult.adsetDbId,
                      ad_account_id,
                      access_token,
                    });
                    
                    results.ads.push(adResult);
                    
                    // Track action
                    if (adResult.action === 'updated') {
                      results.totalUpdated++;
                      results.details.updated.ads.push(adResult);
                    } else {
                      results.totalCreated++;
                      results.details.created.ads.push(adResult);
                    }
                    
                    console.log(
                      `       ${adResult.action === 'updated' ? 'üîÑ Updated' : '‚ûï Created'} Ad "${ad.name}" (ID: ${adResult.adId})`
                    );
                  } catch (adError) {
                    console.error(
                      `     ‚ùå L·ªói x·ª≠ l√Ω Ad "${ad.name}":`,
                      adError.message
                    );
                    results.totalErrors++;
                    results.errors.push({
                      type: "ad",
                      campaignIndex,
                      adsetIndex,
                      adIndex,
                      error: adError.message,
                      error_user_msg: adError.response?.data?.error?.error_user_msg || 
                                     adError.response?.data?.error_user_msg || 
                                     adError.response?.data?.error?.message || 
                                     adError.message,
                      errorDetails: adError.response?.data,
                      name: ad.name,
                      adsetName: adset.name,
                    });
                  }
                }
              }

              const duration = ((Date.now() - startTime) / 1000).toFixed(2);
              console.log(
                `   ‚úÖ AdSet "${adset.name}" ho√†n th√†nh trong ${duration}s`
              );

              return {
                success: true,
                adsetIndex,
                adsetName: adset.name,
                adsProcessed: adset.ads?.length || 0,
                duration,
              };
            } catch (adsetError) {
              const duration = ((Date.now() - startTime) / 1000).toFixed(2);
              console.error(
                `   ‚ùå L·ªói x·ª≠ l√Ω AdSet "${adset.name}" sau ${duration}s:`,
                adsetError.message
              );
              results.totalErrors++;
              results.errors.push({
                type: "adset",
                campaignIndex,
                adsetIndex,
                error: adsetError.message,
                error_user_msg: adsetError.response?.data?.error?.error_user_msg || 
                               adsetError.response?.data?.error_user_msg || 
                               adsetError.response?.data?.error?.message || 
                               adsetError.message,
                errorDetails: adsetError.response?.data,
                name: adset.name,
                campaignName: campaign.name,
              });

              return {
                success: false,
                adsetIndex,
                adsetName: adset.name,
                error: adsetError.message,
                duration,
              };
            }
          }
        );

        // Ch·∫°y t·∫•t c·∫£ AdSet tasks v·ªõi gi·ªõi h·∫°n 8 c√πng l√∫c
        const campaignStartTime = Date.now();
        const adsetResults = await runWithConcurrencyLimit(adsetTasks, 8);
        const campaignDuration = (
          (Date.now() - campaignStartTime) /
          1000
        ).toFixed(2);

        // Log t·ªïng k·∫øt campaign
        const successfulAdsets = adsetResults.filter((r) => r.success).length;
        const failedAdsets = adsetResults.filter((r) => !r.success).length;
        const totalAdsProcessed = adsetResults.reduce(
          (sum, r) => sum + (r.adsProcessed || 0),
          0
        );
        console.log(`Campaign "${campaign.name}" ho√†n th√†nh trong ${campaignDuration}s`);
      } catch (campaignError) {
        console.error(
          `‚ùå L·ªói x·ª≠ l√Ω Campaign "${campaign.name}":`,
          campaignError.message
        );
        results.totalErrors++;
        results.errors.push({
          type: "campaign",
          campaignIndex,
          error: campaignError.message,
          error_user_msg: campaignError.response?.data?.error?.error_user_msg || 
                         campaignError.response?.data?.error_user_msg || 
                         campaignError.response?.data?.error?.message || 
                         campaignError.message,
          errorDetails: campaignError.response?.data,
          name: campaign.name,
        });
      }
    }

    const finalMessage = `C·∫≠p nh·∫≠t ${results.details.updated.campaigns.length + results.details.updated.adsets.length + results.details.updated.ads.length} entities, t·∫°o m·ªõi ${results.details.created.campaigns.length + results.details.created.adsets.length + results.details.created.ads.length} entities trong ${campaignsList.length} campaigns`;
    
    console.log(`\n========== K·∫æT QU·∫¢ T·ªîNG ==========`);
    console.log(`‚úÖ Updated: ${results.details.updated.campaigns.length} campaigns, ${results.details.updated.adsets.length} adsets, ${results.details.updated.ads.length} ads`);
    console.log(`‚ûï Created: ${results.details.created.campaigns.length} campaigns, ${results.details.created.adsets.length} adsets, ${results.details.created.ads.length} ads`);
    console.log(`‚ùå Errors: ${results.totalErrors}`);
    console.log(`========================================\n`);

    return {
      success: results.totalErrors === 0,
      ...results,
      message: finalMessage,
    };
  } catch (error) {
    console.error("‚ùå L·ªói t·ªïng th·ªÉ updateFlexibleService:", error);
    throw error;
  }
}
