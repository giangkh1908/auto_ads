import { OpenAI } from "openai";
import { v4 as uuidv4 } from "uuid";
import dotenv from "dotenv";
import { GoogleGenerativeAI } from "@google/generative-ai";
import { v2 as cloudinary } from "cloudinary";
import pLimit from "p-limit";

dotenv.config();

// Kh·ªüi t·∫°o clients
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

const genAI = new GoogleGenerativeAI(process.env.GOOGLE_API_KEY || "");
const geminiTextModel = genAI.getGenerativeModel({ model: "gemini-2.5-flash" });
const geminiImageModel = genAI.getGenerativeModel({
  model: "gemini-2.5-flash-image",
});

// C·∫•u h√¨nh Cloudinary
cloudinary.config({
  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
  api_key: process.env.CLOUDINARY_API_KEY,
  api_secret: process.env.CLOUDINARY_API_SECRET,
});

// L∆∞u tr·ªØ context trong memory
const contexts = new Map();
const TTL = 30 * 60 * 1000; // 30 ph√∫t

// C·∫•u h√¨nh concurrency v√† retry
const CONCURRENT_LIMIT = 3; // Gi·ªõi h·∫°n 3 request ƒë·ªìng th·ªùi
const MAX_RETRIES = 3;
const RETRY_DELAYS = [1000, 2000, 4000]; // Exponential backoff

/**
 * Retry function v·ªõi exponential backoff
 */
async function retryWithBackoff(fn, maxRetries = MAX_RETRIES, delays = RETRY_DELAYS) {
  for (let attempt = 0; attempt <= maxRetries; attempt++) {
    try {
      return await fn();
    } catch (error) {
      if (attempt === maxRetries) {
        throw error;
      }
      
      const delay = delays[attempt] || delays[delays.length - 1];
      console.log(`üîÑ Retry attempt ${attempt + 1}/${maxRetries} after ${delay}ms`);
      await new Promise(resolve => setTimeout(resolve, delay));
    }
  }
}

/**
 * POST /api/ai/keywords/suggest
 * G·ª£i √Ω t·ª´ kh√≥a li√™n quan
 */
export async function suggestKeywords(req, res) {
  try {
    const {
      language = "vi",
      main_keywords = [],
      ai_provider = "openai", // Th√™m parameter n√†y
    } = req.body;

    if (!main_keywords.length) {
      return res
        .status(400)
        .json({ success: false, message: "Thi·∫øu t·ª´ kh√≥a ch√≠nh" });
    }

    const prompt = `V·ªõi vai tr√≤ l√† chuy√™n gia marketing, h√£y t·∫°o danh s√°ch 5-7 t·ª´ kh√≥a nh·∫Øm m·ª•c ti√™u (targeting keywords) cho qu·∫£ng c√°o Facebook v·ªÅ ch·ªß ƒë·ªÅ "${main_keywords.join(
      ", "
    )}" b·∫±ng ${language}. T·ª´ kh√≥a n√™n ƒëa d·∫°ng, ph√π h·ª£p v·ªõi qu·∫£ng c√°o, v√† li√™n quan ƒë·∫øn ch·ªß ƒë·ªÅ. Ch·ªâ li·ªát k√™ t·ª´ kh√≥a m√† kh√°ch h√†ng ti·ªÅm nƒÉng c√≥ th·ªÉ quan t√¢m, c√°ch nhau b·∫±ng d·∫•u ph·∫©y, kh√¥ng gi·∫£i th√≠ch. M·ªói t·ª´ kh√≥a n√™n ng·∫Øn g·ªçn (1-3 t·ª´).`;

    let relatedKeywordsText = "";

    if (ai_provider === "gemini") {
      const result = await geminiTextModel.generateContent(prompt);
      relatedKeywordsText = result.response.text();
    } else {
      // M·∫∑c ƒë·ªãnh l√† openai
      const response = await openai.chat.completions.create({
        model: "gpt-4o-mini",
        messages: [{ role: "user", content: prompt }],
        temperature: 0.5,
        max_tokens: 300,
      });
      relatedKeywordsText = response.choices[0].message.content.trim();
    }

    const relatedKeywords = relatedKeywordsText
      .split(",")
      .map((k) => k.trim())
      .filter(Boolean);

    return res.status(200).json({
      success: true,
      related_keywords: relatedKeywords,
      ai_provider_used: ai_provider,
    });
  } catch (error) {
    console.error("Error suggesting keywords:", error);
    return res.status(500).json({
      success: false,
      message: "L·ªói khi g·ª£i √Ω t·ª´ kh√≥a",
      error: error.message,
    });
  }
}

/**
 * POST /api/ai/context/confirm
 * X√°c nh·∫≠n context tr∆∞·ªõc khi d√πng AI
 */
export function confirmContext(req, res) {
  try {
    const { language, tone, personalization, main_keywords } = req.body;

    // Validate required fields
    if (!language || !tone || !main_keywords || !Array.isArray(main_keywords)) {
      return res.status(400).json({
        success: false,
        message: "Thi·∫øu th√¥ng tin context (language, tone, main_keywords)",
      });
    }

    // Generate a unique context ID
    const context_id = "ctx_" + uuidv4().substring(0, 8);

    // Store context with expiration time
    contexts.set(context_id, {
      language,
      tone,
      personalization: personalization || "",
      main_keywords,
      expiresAt: Date.now() + TTL,
    });

    // Clean up expired contexts occasionally
    if (Math.random() < 0.1) {
      // 10% chance to clean up
      for (const [id, ctx] of contexts.entries()) {
        if (ctx.expiresAt < Date.now()) {
          contexts.delete(id);
        }
      }
    }

    return res.status(200).json({
      success: true,
      context_id,
      expires_in: TTL / 1000, // seconds
    });
  } catch (error) {
    console.error("Error confirming context:", error);
    return res.status(500).json({
      success: false,
      message: "L·ªói khi x√°c nh·∫≠n context",
      error: error.message,
    });
  }
}

/**
 * Build prompt for text generation based on target and context
 */
function buildPromptByTarget(target, ctx, constraints = {}) {
  const { language, tone, personalization, main_keywords } = ctx;
  const kw = main_keywords.join(", ");
  const maxLen = constraints.max_len || 100;
  const policy = `
TU√ÇN TH·ª¶ NGHI√äM:
1) Kh√¥ng g√°n/suy ƒëo√°n thu·ªôc t√≠nh c√° nh√¢n (s·ª©c kh·ªèe, t√†i ch√≠nh, ch·ªßng t·ªôc, t√¥n gi√°o, tu·ªïi, b·ªánh‚Ä¶); tr√°nh "b·∫°n ƒëang/b·∫°n b·ªã".
2) Kh√¥ng n·ªôi dung y t·∫ø/gi·∫£m c√¢n/thu·ªëc, kh√¥ng ch·∫©n ƒëo√°n hay k·∫øt qu·∫£ ƒë·ªãnh l∆∞·ª£ng.
3) Kh√¥ng "tr∆∞·ªõc‚Äìsau", kh√¥ng b·∫£o ƒë·∫£m k·∫øt qu·∫£, kh√¥ng t·ª´ ng·ªØ tuy·ªát ƒë·ªëi: "t·ªët nh·∫•t", "r·∫ª nh·∫•t", "100%", "cam k·∫øt".
4) Kh√¥ng nh·∫Øc Facebook/Meta hay th∆∞∆°ng hi·ªáu b√™n th·ª© ba n·∫øu kh√¥ng ƒë∆∞·ª£c ph√©p; kh√¥ng logo, watermark.
5) Kh√¥ng gi·∫≠t g√¢n/s·ªëc, k·ª≥ th·ªã, ng∆∞·ªùi l·ªõn, v≈© kh√≠, h√†ng c·∫•m, tin sai.
6) Gi·ªõi h·∫°n k·ªπ thu·∫≠t: tr√°nh ALL CAPS d√†i, kh√¥ng chu·ªói k√Ω t·ª± ƒë·∫∑c bi·ªát, kh√¥ng ƒë·ªÉ s·ªë ƒêT/email trong ti√™u ƒë·ªÅ.
7) Tu√¢n ƒë·ªô d√†i: Primary ‚â§125 k√Ω t·ª± ∆∞u ti√™n ph·∫ßn ƒë·∫ßu; Headline 25-40; Description ~30; CTA 2-3 t·ª´.
Ch·ªâ vi·∫øt n·ªôi dung trung t√≠nh, n√≥i v·ªÅ l·ª£i √≠ch/s·ª≠ d·ª•ng, kh√¥ng nh·∫Øm tr√∫ng ng∆∞·ªùi d√πng c·ª• th·ªÉ.`;

  const sharedContext = `Ng·ªØ c·∫£nh: ${
    personalization || "Qu·∫£ng c√°o s·∫£n ph·∫©m/d·ªãch v·ª•"
  }.T·ª´ kh√≥a: ${kw}.Gi·ªçng: ${tone}. Ng√¥n ng·ªØ: ${language}.${policy}`;

  switch (target) {
    case "headline":
      return `Vi·∫øt 1 ti√™u ƒë·ªÅ qu·∫£ng c√°o (${language}) theo AIDA: ch√∫ √Ω m·∫°nh v√†o l·ª£i √≠ch ch√≠nh, t·ªëi ƒëa ${Math.min(
        maxLen,
        60
      )} k√Ω t·ª±.${sharedContext}.Y√™u c·∫ßu:
- 1 d√≤ng duy nh·∫•t, kh√¥ng ch·∫•m c√¢u cu·ªëi c√¢u n·∫øu kh√¥ng c·∫ßn
- Tr√°nh t·ª´ s√°o r·ªóng, n√™u l·ª£i √≠ch c·ª• th·ªÉ, c√≥ y·∫øu t·ªë kh·∫©n tr∆∞∆°ng h·ª£p l√Ω.`;

    case "body":
      return `Vi·∫øt n·ªôi dung ch√≠nh (${language}) theo AIDA, t·ªëi ƒëa ${maxLen} k√Ω t·ª±. ${sharedContext}.
C·∫•u tr√∫c:
1) Attention: 1 c√¢u m·ªü ƒë·∫ßu ch·∫°m v·∫•n ƒë·ªÅ/mong mu·ªën.
2) Interest/Desire: 2-3 √Ω l·ª£i √≠ch c·ª• th·ªÉ, c√≥ b·∫±ng ch·ª©ng ng·∫Øn (s·ªë li·ªáu/mini proof).
3) Action: 1 CTA r√µ.
K·∫øt th√∫c b·∫±ng CTA ng·∫Øn. Kh√¥ng li·ªát k√™ d·∫°ng bullet, vi·∫øt th√†nh ƒëo·∫°n m·∫°ch l·∫°c.`;

    case "description":
      return `Vi·∫øt 1 m√¥ t·∫£ ng·∫Øn (${language}) b·ªï tr·ª£ ti√™u ƒë·ªÅ, t·ªëi ƒëa ${Math.min(
        maxLen,
        90
      )} k√Ω t·ª±. ${sharedContext}.
Y√™u c·∫ßu:
- N√™u ƒëi·ªÉm kh√°c bi·ªát/c·ª• th·ªÉ h√≥a l·ª£i √≠ch
- Tr√°nh l·∫∑p l·∫°i nguy√™n vƒÉn ti√™u ƒë·ªÅ.`;

    default:
      return `Vi·∫øt n·ªôi dung qu·∫£ng c√°o Facebook b·∫±ng ${language}, gi·ªçng ${tone}.
Ng·ªØ c·∫£nh: ${personalization}. T·ª´ kh√≥a: ${kw}.
Gi·ªõi h·∫°n ${maxLen} k√Ω t·ª±. ${policy}`;
  }
}

/**
 * POST /api/ai/generate-text
 * Sinh n·ªôi dung text cho qu·∫£ng c√°o
 */
export async function generateText(req, res) {
  try {
    const {
      context_id,
      target,
      constraints = {},
      model = "gpt-4o-mini",
    } = req.body;
    if (!context_id || !target) {
      return res.status(400).json({
        success: false,
        message: "Thi·∫øu th√¥ng tin (context_id, target)",
      });
    }

    const ctx = contexts.get(context_id);
    if (!ctx)
      return res.status(404).json({
        success: false,
        code: "CONTEXT_NOT_FOUND",
        message: "Context kh√¥ng t·ªìn t·∫°i",
      });
    if (ctx.expiresAt < Date.now()) {
      contexts.delete(context_id);
      return res.status(410).json({
        success: false,
        code: "CONTEXT_EXPIRED",
        message: "Context ƒë√£ h·∫øt h·∫°n, vui l√≤ng t·∫°o l·∫°i",
      });
    }

    const prompt = buildPromptByTarget(target, ctx, constraints);

    let generatedText = "";
    if (model.startsWith("gemini")) {
      const resp = await geminiTextModel.generateContent(prompt);
      generatedText = resp.response.text().trim();
    } else {
      const response = await openai.chat.completions.create({
        model, // v√≠ d·ª•: 'gpt-4o-mini' (gi·ªØ nguy√™n m·∫∑c ƒë·ªãnh)
        messages: [
          {
            role: "system",
            content:
              "B·∫°n l√† chuy√™n gia vi·∫øt qu·∫£ng c√°o Facebook. Vi·∫øt n·ªôi dung theo y√™u c·∫ßu c·ªßa ng∆∞·ªùi d√πng.",
          },
          { role: "user", content: prompt },
        ],
        temperature: 0.5,
        max_tokens: 300,
      });
      generatedText = response.choices[0].message.content.trim();
    }

    return res.status(200).json({ success: true, chosen: generatedText });
  } catch (error) {
    console.error("Error generating text:", error);
    return res.status(500).json({
      success: false,
      message: "L·ªói khi t·∫°o n·ªôi dung",
      error: error.message,
    });
  }
}

/**
 * Helper: Upload base64 to Cloudinary with size optimization
 */
async function uploadToCloudinary(base64Data, mimeType) {
  try {
    // Check base64 data size (rough estimation)
    const sizeInBytes = (base64Data.length * 3) / 4;
    const sizeInMB = sizeInBytes / (1024 * 1024);

    console.log(`üìä Image size: ${sizeInMB.toFixed(5)}MB`);

    // If image is too large (>5MB), compress it
    let quality = "auto:good";
    if (sizeInMB > 5) {
      quality = "auto:low";
      console.log("üîß Large image detected, using compression");
    }

    const dataUri = `data:${mimeType};base64,${base64Data}`;
    const result = await cloudinary.uploader.upload(dataUri, {
      folder: "ai_ads_images",
      resource_type: "image",
      format: "jpg",
      quality: quality,
      width: 1024,
      height: 1024,
      crop: "limit",
      flags: "progressive",
    });

    console.log(`‚úÖ Uploaded to Cloudinary: ${result.secure_url}`);
    return result.secure_url;
  } catch (error) {
    console.error("Cloudinary upload error:", error);
    throw error;
  }
}

/**
 * Helper: Process and optimize image data from Gemini
 */
function processGeminiImageData(part) {
  try {
    // Check for inline data (most common)
    const inline = part.inlineData || part.inline_data;
    if (inline?.data && inline?.mimeType) {
      return {
        data: inline.data,
        mimeType: inline.mimeType,
        source: "inline",
      };
    }

    // Check for media data
    const media = part.media;
    if (media?.data && media?.mimeType) {
      return {
        data: media.data,
        mimeType: media.mimeType,
        source: "media",
      };
    }

    // Check for file URI
    const fileUri = part.fileData?.fileUri || part.file_data?.file_uri;
    if (fileUri && fileUri.startsWith("http")) {
      return {
        url: fileUri,
        source: "fileUri",
      };
    }

    // Check for text containing URL
    if (typeof part.text === "string") {
      const urlMatch = part.text.match(/https?:\/\/\S+/g);
      if (urlMatch && urlMatch.length) {
        return {
          url: urlMatch[0],
          source: "text",
        };
      }
    }

    return null;
  } catch (error) {
    console.error("Error processing Gemini image data:", error);
    return null;
  }
}

/**
 * T·∫°o m·ªôt ·∫£nh ƒë∆°n l·∫ª v·ªõi Gemini v√† upload l√™n Cloudinary
 */
async function generateSingleGeminiImage(prompt, imageIndex) {
  return retryWithBackoff(async () => {
    console.log(`üîÑ Generating Gemini image ${imageIndex + 1}...`);

    const enhancedPrompt = `${prompt}\n\nGenerate a single high-quality image suitable for Facebook advertising. The image should be clear, professional, and visually appealing. Return the image data directly as base64.`;

    const resp = await geminiImageModel.generateContent([
      {
        text: enhancedPrompt,
      },
    ]);

    const cands = resp?.response?.candidates || [];
    let imageFound = false;
    let result = null;

    for (const c of cands) {
      const parts = c?.content?.parts || [];
      for (const p of parts) {
        try {
          const imageData = processGeminiImageData(p);

          if (!imageData) continue;

          let publicUrl = null;

          // Handle different data sources
          if (imageData.url) {
            // Direct URL (fileUri or text URL)
            publicUrl = imageData.url;
            console.log(`‚úÖ Gemini image ${imageIndex + 1} (direct URL): ${publicUrl}`);
          } else if (imageData.data && imageData.mimeType) {
            // Base64 data - upload to Cloudinary
            console.log(`üì§ Uploading Gemini image ${imageIndex + 1} to Cloudinary (${imageData.source})...`);
            publicUrl = await uploadToCloudinary(imageData.data, imageData.mimeType);
          }

          if (publicUrl) {
            result = {
              preview_url: publicUrl,
              source: imageData.source || "unknown",
              model: "gemini",
            };
            console.log(`‚úÖ Gemini image ${imageIndex + 1}: ${publicUrl}`);
            imageFound = true;
            break;
          }
        } catch (partError) {
          console.error(`‚ùå Error processing Gemini image part ${imageIndex + 1}:`, partError.message);
        }
      }
      if (imageFound) break;
    }

    if (!imageFound) {
      throw new Error(`No valid image generated for image ${imageIndex + 1}`);
    }

    return result;
  });
}

/**
 * POST /api/ai/images/generate
 * Sinh ·∫£nh AI v√† t·ª± ƒë·ªông upload l√™n cloud ƒë·ªÉ c√≥ URL c√¥ng khai
 */
export async function generateImages(req, res) {
  try {
    const {
      context_id,
      count = 3,
      aspect_ratio = "1:1",
      model = "dall-e-2",
    } = req.body;

    if (!context_id) {
      return res
        .status(400)
        .json({ success: false, message: "Thi·∫øu context_id" });
    }

    const ctx = contexts.get(context_id);
    if (!ctx) {
      return res.status(404).json({
        success: false,
        code: "CONTEXT_NOT_FOUND",
        message: "Context kh√¥ng t·ªìn t·∫°i",
      });
    }
    if (ctx.expiresAt < Date.now()) {
      contexts.delete(context_id);
      return res.status(410).json({
        success: false,
        code: "CONTEXT_EXPIRED",
        message: "Context ƒë√£ h·∫øt h·∫°n",
      });
    }

    const { tone, personalization, main_keywords } = ctx;
    const prompt = `Create a high-quality image for Facebook advertising about: ${main_keywords.join(
      ", "
    )}.
Style: ${tone}.
Context: ${personalization || "Professional product/service advertising"}.
The image should be attractive, suitable for Facebook advertising.
No text, logos, or inappropriate content.
Clear, eye-catching colors, brand-appropriate.`;

    console.log(`üé® Generating ${count} images with ${model}...`);
    let previews = [];

    // --------- GEMINI IMAGE ----------
    if (model.startsWith("gemini")) {
      const n = Math.min(count, 3);
      console.log(`üöÄ Starting parallel generation of ${n} Gemini images with concurrency limit ${CONCURRENT_LIMIT}`);

      // T·∫°o limit function ƒë·ªÉ ki·ªÉm so√°t concurrency
      const limit = pLimit(CONCURRENT_LIMIT);

      // T·∫°o array c√°c tasks
      const tasks = Array.from({ length: n }, (_, i) => 
        limit(() => generateSingleGeminiImage(prompt, i))
      );

      // Ch·∫°y t·∫•t c·∫£ tasks song song v·ªõi Promise.allSettled
      const results = await Promise.allSettled(tasks);

      // X·ª≠ l√Ω k·∫øt qu·∫£
      const successfulImages = [];
      const failedImages = [];

      results.forEach((result, index) => {
        if (result.status === 'fulfilled') {
          successfulImages.push(result.value);
          console.log(`‚úÖ Image ${index + 1} generated successfully`);
        } else {
          failedImages.push({ index: index + 1, error: result.reason });
          console.error(`‚ùå Image ${index + 1} failed:`, result.reason.message);
        }
      });

      previews = successfulImages;

      // N·∫øu kh√¥ng c√≥ ·∫£nh n√†o th√†nh c√¥ng, th·ª≠ fallback
      if (!previews.length) {
        console.log("‚ö†Ô∏è No valid images generated by Gemini, trying fallback...");

        try {
          const fallbackPrompt = `Create a simple, clean image for Facebook advertising about: ${main_keywords.join(
            ", "
          )}. Professional style, no text.`;
          
          const fallbackResult = await retryWithBackoff(async () => {
            const fallbackResp = await geminiImageModel.generateContent([
              {
                text: fallbackPrompt,
              },
            ]);

            const fallbackCands = fallbackResp?.response?.candidates || [];
            for (const c of fallbackCands) {
              const parts = c?.content?.parts || [];
              for (const p of parts) {
                const imageData = processGeminiImageData(p);
                if (
                  imageData &&
                  (imageData.url || (imageData.data && imageData.mimeType))
                ) {
                  let publicUrl = imageData.url;
                  if (!publicUrl && imageData.data) {
                    publicUrl = await uploadToCloudinary(
                      imageData.data,
                      imageData.mimeType
                    );
                  }
                  if (publicUrl) {
                    return {
                      preview_url: publicUrl,
                      source: imageData.source || "fallback",
                      model: "gemini",
                    };
                  }
                }
              }
            }
            throw new Error("Fallback generation failed");
          });

          if (fallbackResult) {
            previews.push(fallbackResult);
          }
        } catch (fallbackError) {
          console.error("Fallback generation failed:", fallbackError);
        }

        if (!previews.length) {
          return res.status(500).json({
            success: false,
            message:
              "Gemini kh√¥ng t·∫°o ƒë∆∞·ª£c h√¨nh ·∫£nh h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c s·ª≠ d·ª•ng OpenAI.",
            code: "GEMINI_NO_IMAGE",
          });
        }
      }

      console.log(`üìä Generation summary: ${successfulImages.length} successful, ${failedImages.length} failed`);
    }
    // --------- OPENAI DALL-E ----------
    else {
      console.log("üé® Generating OpenAI DALL-E images...");

      const imagesResponse = await openai.images.generate({
        model: "dall-e-2",
        prompt,
        size: "1024x1024", // DALL-E-2 ch·ªâ h·ªó tr·ª£ size vu√¥ng
        n: Math.min(count, 4),
      });

      previews = imagesResponse.data.map((image, index) => {
        console.log(`‚úÖ OpenAI image ${index + 1}: ${image.url}`);
        return {
          preview_url: image.url,
          source: "openai",
          model: "dall-e-2",
        };
      });
    }

    console.log(`üéâ Successfully generated ${previews.length} images`);

    return res.status(200).json({
      success: true,
      previews,
      ttl: 900,
      model_used: model,
      total_generated: previews.length,
      note: model.startsWith("gemini")
        ? "Gemini images processed and uploaded to Cloudinary with size optimization"
        : "OpenAI DALL-E images with direct URLs",
    });
  } catch (error) {
    console.error("Error generating images:", error);

    // X·ª≠ l√Ω l·ªói c·ª• th·ªÉ
    if (
      error.code === "content_policy_violation" ||
      error.message?.includes("safety")
    ) {
      return res.status(400).json({
        success: false,
        message:
          "N·ªôi dung kh√¥ng ph√π h·ª£p v·ªõi ch√≠nh s√°ch AI. Vui l√≤ng th·ª≠ t·ª´ kh√≥a kh√°c.",
        code: "CONTENT_POLICY_VIOLATION",
      });
    }

    if (
      error.message?.includes("quota") ||
      error.message?.includes("rate limit")
    ) {
      return res.status(429).json({
        success: false,
        message: "ƒê√£ ƒë·∫°t gi·ªõi h·∫°n API. Vui l√≤ng th·ª≠ l·∫°i sau.",
        code: "RATE_LIMIT_EXCEEDED",
      });
    }

    return res.status(500).json({
      success: false,
      message: "L·ªói khi t·∫°o h√¨nh ·∫£nh",
      error: error.message,
    });
  }
}
