// controllers/ads/ads.controller.js
import Ads from "../../models/ads/ads.model.js";
import AdsSet from "../../models/ads/adsSet.model.js";
import { syncAdsFromFacebook, fetchAdsFromFacebook, updateAdStatus, deleteEntity, fetchAdInsights } from "../../services/fbAdsService.js";
import User from "../../models/user.model.js";

// Helper function ƒë·ªÉ extract string ID t·ª´ ObjectId format
function extractObjectId(value) {
  if (!value) return null;
  if (typeof value === 'string') {
    const match = value.match(/[0-9a-fA-F]{24}/);
    return match ? match[0] : null;
  }
  if (value.$oid) return value.$oid; // trong tr∆∞·ªùng h·ª£p Mongo xu·∫•t ra ki·ªÉu { $oid: '...' }
  return value.toString();
}

/**
 * GET /api/ads/database
 * L·∫•y ad t·ª´ database theo ad_id ho·∫∑c campaign_id
 */
export async function getAdFromDatabase(req, res) {
  try {
    const { ad_id, campaign_id } = req.query;
    
    if (!ad_id && !campaign_id) {
      return res.status(400).json({
        success: false,
        message: "Thi·∫øu ad_id ho·∫∑c campaign_id"
      });
    }

    // Extract v√† validate ad_id n·∫øu c√≥
    const cleanAdId = extractObjectId(ad_id);
    if (ad_id && !cleanAdId) {
      return res.status(400).json({
        success: false,
        message: "ad_id kh√¥ng h·ª£p l·ªá"
      });
    }

    // Extract v√† validate campaign_id n·∫øu c√≥
    const cleanCampaignId = extractObjectId(campaign_id);
    if (campaign_id && !cleanCampaignId) {
      return res.status(400).json({
        success: false,
        message: "campaign_id kh√¥ng h·ª£p l·ªá"
      });
    }

    let ad;
    if (cleanAdId) {
      ad = await Ads.findById(cleanAdId).populate('created_by', 'full_name email');
    } else if (cleanCampaignId) {
      // T√¨m ads th√¥ng qua campaign_id
      const ads = await Ads.find({ 
        $or: [
          { campaign_id: cleanCampaignId },
          { set_id: { $in: await AdsSet.find({ campaign_id: cleanCampaignId }).distinct('_id') } }
        ]
      })
      .populate('created_by', 'full_name email')
      .sort({ createdAt: -1 });
      return res.status(200).json({
        success: true,
        data: ads
      });
    }
    
    if (!ad) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y ad"
      });
    }

    return res.status(200).json({
      success: true,
      data: ad
    });
  } catch (err) {
    console.error("GET Ad from database error:", err);
    return res.status(500).json({
      success: false,
      message: "L·ªói khi l·∫•y ad t·ª´ database",
      error: err.message
    });
  }
}

/**
 * GET /api/ads
 * L·∫•y danh s√°ch qu·∫£ng c√°o
 */
export async function listAdsCtrl(req, res) {
  try {
    const { account_id, adset_id, q, status, page = 1, limit = 10 } = req.query;

    // X√¢y d·ª±ng filter
    const filter = {};

    filter.status = { $ne: "DELETED" };
    if (account_id) {
      // H·ªó tr·ª£ c·∫£ ƒë·ªãnh d·∫°ng c√≥ act_ v√† kh√¥ng c√≥ act_
      const normalizedId = account_id.startsWith("act_")
        ? account_id.substring(4)
        : account_id;
      filter.external_account_id = {
        $in: [normalizedId, `act_${normalizedId}`],
      };
      filter.external_account_id = {
        $in: [normalizedId, `act_${normalizedId}`],
      };
    }

    if (adset_id) filter.set_id = adset_id;
    // N·∫øu c√≥ filter status c·ª• th·ªÉ, ghi ƒë√® filter m·∫∑c ƒë·ªãnh
    if (status) filter.status = status;
    if (q) filter.name = new RegExp(q, "i");

    // L·∫•y d·ªØ li·ªáu c√≥ ph√¢n trang
    const skip = (Number(page) - 1) * Number(limit);
    const [items, total] = await Promise.all([
      Ads.find(filter)
        .populate('created_by', 'full_name email')
        .sort({ createdAt: -1 })
        .skip(skip)
        .limit(Number(limit)),
      Ads.countDocuments(filter),
    ]);

    return res.status(200).json({
      items,
      total,
      page: Number(page),
      limit: Number(limit),
      pages: Math.ceil(total / Number(limit)) || 1,
    });
  } catch (err) {
    console.error("GET Ads error:", err);
    return res
      .status(500)
      .json({ message: "L·ªói khi l·∫•y danh s√°ch qu·∫£ng c√°o", error: err.message });
  }
}

/**
 * GET /api/ads/sync
 * ƒê·ªìng b·ªô qu·∫£ng c√°o (Ads) t·ª´ Facebook
 */
export async function syncAdsCtrl(req, res) {
  try {
    const { account_id } = req.query;
    if (!account_id) {
      return res.status(400).json({ message: "Thi·∫øu account_id" });
    }

    // L·∫•y token: ∆∞u ti√™n query, fallback DB c·ªßa user hi·ªán t·∫°i
    let accessToken = req.query.access_token;
    if (!accessToken) {
      const user = await User.findById(req.user?._id).select(
        "+facebookAccessToken"
      );
      accessToken = user?.facebookAccessToken || null;
    }

    if (!accessToken) {
      return res.status(400).json({
        message:
          "Kh√¥ng t√¨m th·∫•y Facebook access_token. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.",
        message:
          "Kh√¥ng t√¨m th·∫•y Facebook access_token. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.",
        missingToken: true,
      });
    }

    const results = await syncAdsFromFacebook(accessToken, account_id);
    return res.status(200).json({
      message: `ƒê√£ ƒë·ªìng b·ªô ${results.length} qu·∫£ng c√°o t·ª´ Facebook`,
      count: results.length,
    });
  } catch (err) {
    console.error("SYNC Ads error:", err);
    return res.status(500).json({
      message: "L·ªói khi ƒë·ªìng b·ªô qu·∫£ng c√°o t·ª´ Facebook",
      error: err.message,
    });
  }
}

/**
 * GET /api/ads/live
 * L·∫•y danh s√°ch qu·∫£ng c√°o (ads) tr·ª±c ti·∫øp t·ª´ Facebook (kh√¥ng l∆∞u DB)
 */
export async function getAdsLiveCtrl(req, res) {
  try {
    const { account_id } = req.query;
    if (!account_id) {
      return res.status(400).json({ message: "Thi·∫øu account_id" });
    }

    let accessToken = req.query.access_token;
    if (!accessToken) {
      const user = await User.findById(req.user?._id).select("+facebookAccessToken");
      accessToken = user?.facebookAccessToken || null;
    }
    if (!accessToken) {
      return res.status(400).json({
        message: "Kh√¥ng t√¨m th·∫•y Facebook access_token. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.",
        missingToken: true,
      });
    }

    const data = await fetchAdsFromFacebook(accessToken, account_id);
    return res.status(200).json({ items: data, total: data.length });
  } catch (err) {
    console.error("GET Live Ads error:", err);
    return res.status(500).json({ message: "L·ªói l·∫•y ads t·ª´ Facebook", error: err.message });
  }
}

/**
 * GET /api/ads/insights
 * L·∫•y insights cho danh s√°ch ads (ids=comma,separated)
 */
export async function getAdsInsightsCtrl(req, res) {
  try {
    const { ids } = req.query;
    if (!ids) {
      return res.status(400).json({ message: "Thi·∫øu danh s√°ch ids" });
    }

    // L·∫•y access token t·ª´ query ho·∫∑c t·ª´ user hi·ªán t·∫°i
    let accessToken = req.query.access_token;
    if (!accessToken) {
      const user = await User.findById(req.user?._id).select("+facebookAccessToken");
      accessToken = user?.facebookAccessToken || null;
    }
    if (!accessToken) {
      return res.status(400).json({
        message: "Kh√¥ng t√¨m th·∫•y Facebook access_token. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.",
        missingToken: true,
      });
    }

    const adIds = String(ids)
      .split(",")
      .map((s) => s.trim())
      .filter((s) => s.length > 0);

    const insights = await fetchAdInsights(accessToken, adIds);
    return res.status(200).json({ items: insights, total: insights.length });
  } catch (err) {
    console.error("GET Ads insights error:", err);
    return res.status(500).json({ message: "L·ªói l·∫•y insights t·ª´ Facebook", error: err.message });
  }
}

/**
 * PATCH /api/ads/:id/status
 * B·∫≠t/T·∫Øt ad tr·ª±c ti·∫øp tr√™n Facebook
 */
export async function toggleAdStatusCtrl(req, res) {
  try {
    const { id } = req.params; // Facebook ad id
    const { status } = req.body; // "ACTIVE" | "PAUSED"
    if (!id || !status) return res.status(400).json({ message: "Thi·∫øu id ho·∫∑c status" });

    const user = await User.findById(req.user?._id).select("+facebookAccessToken");
    const accessToken = user?.facebookAccessToken;
    if (!accessToken) return res.status(401).json({ message: "Thi·∫øu access token Facebook" });

    await updateAdStatus(id, accessToken, status);
    return res.status(200).json({ success: true });
  } catch (err) {
    console.error("Toggle ad status error:", err.response?.data || err.message);
    return res.status(500).json({ message: "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i ad", detail: err.response?.data || err.message });
  }
}

export async function deleteAdCtrl(req, res) {
  try {
    const { id } = req.params;
    const ad = await Ads.findById(id);
    if (!ad)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y qu·∫£ng c√°o." });

    // ‚úÖ L·∫•y access token t·ª´ user ho·∫∑c query (∆∞u ti√™n query)
    let accessToken = req.user?.facebookAccessToken || req.query.access_token || null;

    // N·∫øu ch∆∞a c√≥ token trong user, th·ª≠ l·∫•y t·ª´ DB
    if (!accessToken && req.user?._id) {
      const user = await User.findById(req.user._id).select("+facebookAccessToken");
      accessToken = user?.facebookAccessToken || null;
    }

    if (!accessToken) {
      console.warn("‚ö†Ô∏è Kh√¥ng c√≥ Facebook access_token ‚Äî ch·ªâ x√≥a m·ªÅm trong DB, b·ªè qua Facebook API.");
    }

    // ‚úÖ Th·ª±c hi·ªán xo√° th·∫≠t tr√™n Facebook n·∫øu c√≥ token & external_id
    if (accessToken && ad.external_id) {
      try {
        const deleted = await deleteEntity(ad.external_id, accessToken);
        if (deleted) {
          console.log(`üßπ ƒê√£ xo√° th·∫≠t qu·∫£ng c√°o ${ad.name} (${ad.external_id}) tr√™n Facebook`);
        } else {
          console.warn(`‚ö†Ô∏è Kh√¥ng th·ªÉ xo√° qu·∫£ng c√°o ${ad.name} tr√™n Facebook (Facebook tr·∫£ v·ªÅ false)`);
        }
      } catch (fbErr) {
        console.warn("‚ö†Ô∏è L·ªói khi xo√° tr√™n Facebook:", fbErr?.response?.data || fbErr.message);
      }
    }

    // ‚úÖ Xo√° m·ªÅm trong DB (gi·ªØ l·∫°i record ƒë·ªÉ kh√¥ng b·ªã sync l·∫°i)
    await Ads.findByIdAndUpdate(id, {
      status: "DELETED",
      deleted_at: new Date(),
    });

    return res.status(200).json({
      success: true,
      message: `ƒê√£ xo√° qu·∫£ng c√°o "${ad.name}" ${accessToken ? "(Facebook + DB)" : "(ch·ªâ trong DB)"}.`,
    });
  } catch (err) {
    console.error("‚ùå Xo√° Ad l·ªói:", err);
    return res.status(500).json({
      message: "Xo√° th·∫•t b·∫°i",
      error: err.message,
    });
  }
}

/**
 * POST /api/ads/:id/copy
 * T·∫°o b·∫£n sao m·ªôt Ad (DB only)
 */
export async function copyAdCtrl(req, res) {
  try {
    const { id } = req.params;
    const ad = await Ads.findById(id).lean();
    if (!ad) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y qu·∫£ng c√°o." });
    const created = await Ads.create({
      name: `${ad.name || 'Qu·∫£ng c√°o'} (b·∫£n sao)`,
      status: 'IN_PROCESS',
      external_id: null,
      external_account_id: ad.external_account_id,
      set_id: ad.set_id,
      campaign_id: ad.campaign_id,
      effective_status: ad.effective_status,
      creative: ad.creative,
    });
    return res.status(201).json({ success: true, data: created });
  } catch (err) {
    console.error('‚ùå Copy Ad l·ªói:', err);
    return res.status(500).json({ message: 'Copy th·∫•t b·∫°i', error: err.message });
  }
}