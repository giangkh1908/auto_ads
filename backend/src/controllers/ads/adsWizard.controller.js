// controllers/ads/adsWizard.controller.js
import mongoose from 'mongoose';
import { 
  publishWizard, 
  updateWizard,
  publishCampaignService,
  publishAdsetService,
  publishAdService,
  publishFlexibleService,
  updateFlexibleService,
} from "../../services/adsWizardService.js";
import User from "../../models/user.model.js";
import AdsAccount from "../../models/ads/adsAccount.model.js";
import AdsCampaign from "../../models/ads/adsCampaign.model.js";
import AdsSet from "../../models/ads/adsSet.model.js";
import Ads from "../../models/ads/ads.model.js";
import Creative from "../../models/ads/creative.model.js";

/**
 * ü™Ñ Controller: Publish quy tr√¨nh t·∫°o qu·∫£ng c√°o Wizard
 * Bao g·ªìm Campaign ‚Üí AdSet ‚Üí Creative ‚Üí Ad
 */
export async function publishAdsWizard(req, res) {
  try {
    const {
      ad_account_id,
      access_token: tokenFromFE,
      campaign,
      adset,
      creative,
      ad,
      dry_run = false,
      campaignDraftId,
      adsetDraftId,
      creativeDraftId,
      adDraftId,
    } = req.body;

    //  L·∫•y Access Token: lu√¥n ∆∞u ti√™n token l∆∞u trong DB ƒë·ªÉ kh·ªõp APP SECRET
    const user = await User.findById(req.user?._id).select(
      "+facebookAccessToken"
    );
    if (!user) {
      return res.status(401).json({
        success: false,
        message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i ho·∫∑c ch∆∞a ƒëƒÉng nh·∫≠p.",
      });
    }
    const access_token = user.facebookAccessToken || tokenFromFE;

    if (!ad_account_id || !access_token) {
      return res.status(400).json({
        success: false,
        message: "Thi·∫øu ad_account_id ho·∫∑c access_token.",
      });
    }

    // Ki·ªÉm tra quy·ªÅn s·ªü h·ªØu t√†i kho·∫£n qu·∫£ng c√°o
    const account = await AdsAccount.findOne({
      external_id: ad_account_id,
      $or: [
        { user: req.user._id },
        { shop_admin_id: req.user._id },
        { shop_user_id: req.user._id },
      ],
    });

    if (!account) {
      return res.status(403).json({
        success: false,
        message: "T√†i kho·∫£n qu·∫£ng c√°o kh√¥ng thu·ªôc quy·ªÅn s·ªü h·ªØu c·ªßa b·∫°n.",
      });
    }

    // Validate d·ªØ li·ªáu ƒë·∫ßu v√†o c∆° b·∫£n
    if (!campaign?.name || !campaign?.objective) {
      return res.status(400).json({
        success: false,
        message: "Thi·∫øu th√¥ng tin chi·∫øn d·ªãch (t√™n ho·∫∑c m·ª•c ti√™u).",
      });
    }

    if (!adset?.name) {
      return res.status(400).json({
        success: false,
        message: "Thi·∫øu t√™n nh√≥m qu·∫£ng c√°o (Ad Set).",
      });
    }

    if (!creative?.object_story_spec) {
      return res.status(400).json({
        success: false,
        message: "Thi·∫øu n·ªôi dung qu·∫£ng c√°o (Creative.object_story_spec).",
      });
    }

    console.log(
      ` [Wizard] B·∫Øt ƒë·∫ßu publish qu·∫£ng c√°o cho account: ${ad_account_id}`
    );

    // S·ª≠a trong h√†m publishAdsWizard

    // Th√™m ƒëo·∫°n n√†y ngay tr∆∞·ªõc khi g·ªçi service
    // Kho·∫£ng d√≤ng 68 (sau ph·∫ßn validate)
    if (adset.bid_strategy === "LOWEST_COST_WITHOUT_CAP" && adset.bid_amount !== undefined) {
      console.log("‚ö†Ô∏è Controller: Ph√°t hi·ªán xung ƒë·ªôt bid_strategy v√† bid_amount");
      // X√≥a bid_amount tr·ª±c ti·∫øp t·ª´ ƒë·ªëi t∆∞·ª£ng hi·ªán t·∫°i
      delete adset.bid_amount; // ‚úÖ H·ª£p l·ªá - ch·ªâ s·ª≠a thu·ªôc t√≠nh kh√¥ng g√°n l·∫°i bi·∫øn
    }

    // G·ªçi service ch√≠nh
    const result = await publishWizard({
      ad_account_id,
      access_token,
      campaign: {
        ...campaign,
        account_id: account._id,
        shop_id: account.shop_id || req.user.shop_id, // fallback sang user.shop_id
        created_by: req.user._id,
        page_id: campaign.page_id,
        page_name: campaign.page_name,
      },
      adset: {
        ...adset, // S·ª≠ d·ª•ng adset ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω
        created_by: req.user._id,
      },
      creative: {
        ...creative,
        created_by: req.user._id,
      },
      ad: {
        ...ad,
        created_by: req.user._id,
      },
      dry_run,
      campaignDraftId,
      adsetDraftId,
      creativeDraftId,
      adDraftId,
    });

    // Tr·∫£ k·∫øt qu·∫£ cho FE
    return res.status(201).json({
      success: true,
      message: dry_run
        ? "Dry run th√†nh c√¥ng (ch∆∞a publish th·∫≠t)."
        : "Publish th√†nh c√¥ng.",
      data: {
        campaign: result.campaign,
        adset: result.adset,
        ad: result.ad,
        creative: result.creative,
        drafts: result.drafts,
      },
    });
  } catch (error) {
    console.error("Publish Wizard Error:", error?.response?.data || error);
    const status = error?.response?.status || 500;
    const error_user_msg =
      error?.response?.data?.error_user_msg ||
      error?.response?.data?.error?.error_user_msg ||
      null;
    return res.status(status).json({
      success: false,
      message: "Publish th·∫•t b·∫°i.",
      error_user_msg,
    });
  }
}

export async function updateAdsWizard(req, res) {
  try {
    const {
      ad_account_id,
      access_token: tokenFromFE,
      campaign,
      adset,
      creative,
      ad,
      dry_run = false,
    } = req.body;

    // üß© 1Ô∏è‚É£ L·∫•y Access Token
    let access_token = tokenFromFE;
    if (!access_token) {
      const user = await User.findById(req.user?._id).select("+facebookAccessToken");
      if (!user)
        return res.status(401).json({ success: false, message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i ho·∫∑c ch∆∞a ƒëƒÉng nh·∫≠p." });
      access_token = user.facebookAccessToken;
    }

    if (!ad_account_id || !access_token) {
      return res.status(400).json({ success: false, message: "Thi·∫øu ad_account_id ho·∫∑c access_token." });
    }

    // üß© 2Ô∏è‚É£ Ki·ªÉm tra quy·ªÅn s·ªü h·ªØu t√†i kho·∫£n qu·∫£ng c√°o
    const account = await AdsAccount.findOne({
      external_id: ad_account_id,
      $or: [
        { user: req.user._id },
        { shop_admin_id: req.user._id },
        { shop_user_id: req.user._id },
      ],
    });
    if (!account)
      return res.status(403).json({ success: false, message: "T√†i kho·∫£n qu·∫£ng c√°o kh√¥ng thu·ªôc quy·ªÅn s·ªü h·ªØu c·ªßa b·∫°n." });

    // ‚úÖ CASE 1: N·∫øu c√≥ campaign.adsets ‚Üí d√πng cascade update
    if (campaign?.adsets && Array.isArray(campaign.adsets) && campaign.adsets.length > 0) {
      console.log(`üîÑ [Wizard] S·ª≠ d·ª•ng cascade update cho campaign: ${campaign.name}`);
      
      // Enrich campaign data
      const enrichedCampaign = {
        ...campaign,
        account_id: account._id,
        shop_id: account.shop_id || req.user.shop_id,
        // ‚ö†Ô∏è KH√îNG ghi ƒë√® created_by khi update
        adsets: campaign.adsets.map(adset => ({
          ...adset,
          ads: adset.ads?.map(ad => ({
            ...ad,
          })) || []
        }))
      };
      
      const result = await updateFlexibleService({
        ad_account_id,
        access_token,
        campaignsList: [enrichedCampaign], // Wrap single campaign
      });
      
      return res.status(200).json({
        success: result.success,
        message: `C·∫≠p nh·∫≠t ${result.totalUpdated} entities, t·∫°o m·ªõi ${result.totalCreated} entities`,
        data: result,
      });
    }

    // ‚úÖ CASE 2: Fallback - d√πng updateWizard c≈© cho backward compatibility
    console.log(`üîÑ [Wizard] S·ª≠ d·ª•ng update ri√™ng l·∫ª (legacy) cho account: ${ad_account_id}`);
    
    // X·ª≠ l√Ω xung ƒë·ªôt bid_strategy cho adset
    if (adset?.bid_strategy === "LOWEST_COST_WITHOUT_CAP" && adset?.bid_amount !== undefined) {
      console.log("‚ö†Ô∏è Controller (update): Ph√°t hi·ªán xung ƒë·ªôt bid_strategy v√† bid_amount");
      delete adset.bid_amount;
    }

    // üß© 3Ô∏è‚É£ G·ªçi service updateWizard
    const result = await updateWizard({
      ad_account_id,
      access_token,
      campaign,
      adset,
      creative,
      ad,
      dry_run,
    });

    // üß© 4Ô∏è‚É£ Tr·∫£ k·∫øt qu·∫£ cho FE
    return res.status(200).json({
      success: true,
      message: dry_run
        ? "Dry run update th√†nh c√¥ng (ch∆∞a c·∫≠p nh·∫≠t th·∫≠t)."
        : "C·∫≠p nh·∫≠t wizard th√†nh c√¥ng.",
      data: result,
    });
  } catch (error) {
    console.error("üî• Update Wizard Error:", error?.response?.data || error);
    const status = error?.response?.status || 500;
    const error_user_msg =
      error?.response?.data?.error_user_msg ||
      error?.response?.data?.error?.error_user_msg ||
      null;
    return res.status(status).json({
      success: false,
      message: "C·∫≠p nh·∫≠t wizard th·∫•t b·∫°i.",
      error_user_msg,
    });
  }
}

// ========================================
// üéØ NEW FLEXIBLE CONTROLLERS FOR DIFFERENT MODELS
// ========================================

/**
 * üéØ Controller: T·∫°o Campaign ri√™ng bi·ªát
 * POST /api/ads-wizard/publish-campaign
 */
export async function publishCampaignController(req, res) {
  try {
    const {
      ad_account_id,
      access_token: tokenFromFE,
      campaign,
      dry_run = false,
      campaignDraftId,
    } = req.body;

    // L·∫•y Access Token: lu√¥n ∆∞u ti√™n token l∆∞u trong DB ƒë·ªÉ kh·ªõp APP SECRET
    const user = await User.findById(req.user?._id).select("+facebookAccessToken");
    if (!user) {
      return res.status(401).json({
        success: false,
        message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i ho·∫∑c ch∆∞a ƒëƒÉng nh·∫≠p.",
      });
    }
    const access_token = user.facebookAccessToken || tokenFromFE;

    if (!ad_account_id || !access_token) {
      return res.status(400).json({
        success: false,
        message: "Thi·∫øu ad_account_id ho·∫∑c access_token.",
      });
    }

    // Ki·ªÉm tra quy·ªÅn s·ªü h·ªØu t√†i kho·∫£n qu·∫£ng c√°o
    const account = await AdsAccount.findOne({
      external_id: ad_account_id,
      $or: [
        { user: req.user._id },
        { shop_admin_id: req.user._id },
        { shop_user_id: req.user._id },
      ],
    });

    if (!account) {
      return res.status(403).json({
        success: false,
        message: "T√†i kho·∫£n qu·∫£ng c√°o kh√¥ng thu·ªôc quy·ªÅn s·ªü h·ªØu c·ªßa b·∫°n.",
      });
    }

    // Validate d·ªØ li·ªáu ƒë·∫ßu v√†o c∆° b·∫£n
    if (!campaign?.name || !campaign?.objective) {
      return res.status(400).json({
        success: false,
        message: "Thi·∫øu th√¥ng tin chi·∫øn d·ªãch (t√™n ho·∫∑c m·ª•c ti√™u).",
      });
    }

    console.log(`[Campaign Only] B·∫Øt ƒë·∫ßu t·∫°o campaign: ${campaign.name}`);

    // G·ªçi service t·∫°o campaign
    const result = await publishCampaignService({
      ad_account_id,
      access_token,
      campaign: {
        ...campaign,
        account_id: account._id,
        shop_id: account.shop_id || req.user.shop_id,
        created_by: req.user._id,
        page_id: campaign.page_id,
        page_name: campaign.page_name,
      },
      dry_run,
      campaignDraftId,
    });

    return res.status(200).json({
      success: true,
      message: "T·∫°o campaign th√†nh c√¥ng!",
      data: result,
    });

  } catch (error) {
    console.error("‚ùå L·ªói publish campaign:", error);
    const error_user_msg = error?.response?.data?.error_user_msg || error.message;
    const status = error?.response?.status || 500;

    return res.status(status).json({
      success: false,
      message: "T·∫°o campaign th·∫•t b·∫°i.",
      error_user_msg,
    });
  }
}

/**
 * üéØ Controller: T·∫°o AdSet cho Campaign ƒë√£ c√≥
 * POST /api/ads-wizard/publish-adset
 */
export async function publishAdsetController(req, res) {
  try {
    const {
      ad_account_id,
      access_token: tokenFromFE,
      campaignId,
      adset,
      dry_run = false,
      adsetDraftId,
    } = req.body;

    // L·∫•y Access Token
    const user = await User.findById(req.user?._id).select("+facebookAccessToken");
    if (!user) {
      return res.status(401).json({
        success: false,
        message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i ho·∫∑c ch∆∞a ƒëƒÉng nh·∫≠p.",
      });
    }
    const access_token = user.facebookAccessToken || tokenFromFE;

    if (!ad_account_id || !access_token || !campaignId) {
      return res.status(400).json({
        success: false,
        message: "Thi·∫øu ad_account_id, access_token ho·∫∑c campaignId.",
      });
    }

    // Ki·ªÉm tra quy·ªÅn s·ªü h·ªØu t√†i kho·∫£n qu·∫£ng c√°o
    const account = await AdsAccount.findOne({
      external_id: ad_account_id,
      $or: [
        { user: req.user._id },
        { shop_admin_id: req.user._id },
        { shop_user_id: req.user._id },
      ],
    });

    if (!account) {
      return res.status(403).json({
        success: false,
        message: "T√†i kho·∫£n qu·∫£ng c√°o kh√¥ng thu·ªôc quy·ªÅn s·ªü h·ªØu c·ªßa b·∫°n.",
      });
    }

    // Validate d·ªØ li·ªáu ƒë·∫ßu v√†o
    if (!adset?.name) {
      return res.status(400).json({
        success: false,
        message: "Thi·∫øu t√™n nh√≥m qu·∫£ng c√°o (Ad Set).",
      });
    }

    console.log(`[AdSet Only] B·∫Øt ƒë·∫ßu t·∫°o adset: ${adset.name} cho campaign: ${campaignId}`);

    // G·ªçi service t·∫°o adset
    const result = await publishAdsetService({
      ad_account_id,
      access_token,
      campaignId,
      adset: {
        ...adset,
        created_by: req.user._id,
      },
      dry_run,
      adsetDraftId,
    });

    return res.status(200).json({
      success: true,
      message: "T·∫°o adset th√†nh c√¥ng!",
      data: result,
    });

  } catch (error) {
    console.error("‚ùå L·ªói publish adset:", error);
    const error_user_msg = error?.response?.data?.error_user_msg || error.message;
    const status = error?.response?.status || 500;

    return res.status(status).json({
      success: false,
      message: "T·∫°o adset th·∫•t b·∫°i.",
      error_user_msg,
    });
  }
}

/**
 * üéØ Controller: T·∫°o Ad cho AdSet ƒë√£ c√≥
 * POST /api/ads-wizard/publish-ad
 */
export async function publishAdController(req, res) {
  try {
    const {
      ad_account_id,
      access_token: tokenFromFE,
      adsetId,
      creative,
      ad,
      dry_run = false,
      adDraftId,
    } = req.body;

    // L·∫•y Access Token
    const user = await User.findById(req.user?._id).select("+facebookAccessToken");
    if (!user) {
      return res.status(401).json({
        success: false,
        message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i ho·∫∑c ch∆∞a ƒëƒÉng nh·∫≠p.",
      });
    }
    const access_token = user.facebookAccessToken || tokenFromFE;

    if (!ad_account_id || !access_token || !adsetId) {
      return res.status(400).json({
        success: false,
        message: "Thi·∫øu ad_account_id, access_token ho·∫∑c adsetId.",
      });
    }

    // Ki·ªÉm tra quy·ªÅn s·ªü h·ªØu t√†i kho·∫£n qu·∫£ng c√°o
    const account = await AdsAccount.findOne({
      external_id: ad_account_id,
      $or: [
        { user: req.user._id },
        { shop_admin_id: req.user._id },
        { shop_user_id: req.user._id },
      ],
    });

    if (!account) {
      return res.status(403).json({
        success: false,
        message: "T√†i kho·∫£n qu·∫£ng c√°o kh√¥ng thu·ªôc quy·ªÅn s·ªü h·ªØu c·ªßa b·∫°n.",
      });
    }

    // Validate d·ªØ li·ªáu ƒë·∫ßu v√†o
    if (!creative?.object_story_spec) {
      return res.status(400).json({
        success: false,
        message: "Thi·∫øu n·ªôi dung qu·∫£ng c√°o (Creative.object_story_spec).",
      });
    }

    if (!ad?.name) {
      return res.status(400).json({
        success: false,
        message: "Thi·∫øu t√™n qu·∫£ng c√°o (Ad).",
      });
    }

    console.log(`[Ad Only] B·∫Øt ƒë·∫ßu t·∫°o ad: ${ad.name} cho adset: ${adsetId}`);

    // G·ªçi service t·∫°o ad
    const result = await publishAdService({
      ad_account_id,
      access_token,
      adsetId,
      creative: {
        ...creative,
        created_by: req.user._id,
      },
      ad: {
        ...ad,
        created_by: req.user._id,
      },
      dry_run,
      adDraftId,
    });

    return res.status(200).json({
      success: true,
      message: "T·∫°o ad th√†nh c√¥ng!",
      data: result,
    });

  } catch (error) {
    console.error("‚ùå L·ªói publish ad:", error);
    const error_user_msg = error?.response?.data?.error_user_msg || error.message;
    const status = error?.response?.status || 500;

    return res.status(status).json({
      success: false,
      message: "T·∫°o ad th·∫•t b·∫°i.",
      error_user_msg,
    });
  }
}

/**
 * üéØ Controller: T·∫°o to√†n b·ªô c·∫•u tr√∫c linh ho·∫°t
 * POST /api/ads-wizard/publish-flexible
 */
export async function publishFlexibleController(req, res) {
  try {
    const {
      ad_account_id,
      access_token: tokenFromFE,
      campaignsList,
      dry_run = false,
    } = req.body;

    // L·∫•y Access Token
    const user = await User.findById(req.user?._id).select("+facebookAccessToken");
    if (!user) {
      return res.status(401).json({
        success: false,
        message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i ho·∫∑c ch∆∞a ƒëƒÉng nh·∫≠p.",
      });
    }
    const access_token = user.facebookAccessToken || tokenFromFE;

    if (!ad_account_id || !access_token) {
      return res.status(400).json({
        success: false,
        message: "Thi·∫øu ad_account_id ho·∫∑c access_token.",
      });
    }

    // Ki·ªÉm tra quy·ªÅn s·ªü h·ªØu t√†i kho·∫£n qu·∫£ng c√°o
    const account = await AdsAccount.findOne({
      external_id: ad_account_id,
      $or: [
        { user: req.user._id },
        { shop_admin_id: req.user._id },
        { shop_user_id: req.user._id },
      ],
    });

    if (!account) {
      return res.status(403).json({
        success: false,
        message: "T√†i kho·∫£n qu·∫£ng c√°o kh√¥ng thu·ªôc quy·ªÅn s·ªü h·ªØu c·ªßa b·∫°n.",
      });
    }

    // Validate d·ªØ li·ªáu ƒë·∫ßu v√†o
    if (!campaignsList || !Array.isArray(campaignsList) || campaignsList.length === 0) {
      return res.status(400).json({
        success: false,
        message: "Thi·∫øu danh s√°ch campaigns ho·∫∑c danh s√°ch r·ªóng.",
      });
    }

    // Validate t·ª´ng campaign
    for (let i = 0; i < campaignsList.length; i++) {
      const campaign = campaignsList[i];
      if (!campaign?.name || !campaign?.objective) {
        return res.status(400).json({
          success: false,
          message: `Campaign ${i + 1}: Thi·∫øu t√™n ho·∫∑c m·ª•c ti√™u.`,
        });
      }
      if (!campaign?.adsets || !Array.isArray(campaign.adsets) || campaign.adsets.length === 0) {
        return res.status(400).json({
          success: false,
          message: `Campaign ${i + 1}: Thi·∫øu danh s√°ch adsets.`,
        });
      }
    }

    console.log(`[Flexible Structure] B·∫Øt ƒë·∫ßu t·∫°o ${campaignsList.length} campaigns v·ªõi c·∫•u tr√∫c linh ho·∫°t`);

    // Chu·∫©n b·ªã d·ªØ li·ªáu v·ªõi th√¥ng tin user
    const enrichedCampaignsList = campaignsList.map(campaign => ({
      ...campaign,
      account_id: account._id,
      shop_id: account.shop_id || req.user.shop_id,
      created_by: req.user._id,
      adsets: campaign.adsets.map(adset => ({
        ...adset,
        created_by: req.user._id,
        ads: adset.ads.map(ad => ({
          ...ad,
          created_by: req.user._id,
          creative: {
            ...ad.creative,
            created_by: req.user._id,
          }
        }))
      }))
    }));

    // G·ªçi service t·∫°o c·∫•u tr√∫c linh ho·∫°t
    const result = await publishFlexibleService({
      ad_account_id,
      access_token,
      campaignsList: enrichedCampaignsList,
      dry_run,
    });

    return res.status(200).json({
      success: result.success,
      message: result.message,
      data: result,
    });

  } catch (error) {
    console.error("‚ùå L·ªói publish flexible structure:", error);
    const error_user_msg = error?.response?.data?.error_user_msg || error.message;
    const status = error?.response?.status || 500;

    return res.status(status).json({
      success: false,
      message: "T·∫°o c·∫•u tr√∫c linh ho·∫°t th·∫•t b·∫°i.",
      error_user_msg,
    });
  }
}

/**
 * üîÑ Controller: Update to√†n b·ªô c·∫•u tr√∫c linh ho·∫°t
 * PUT /api/ads-wizard/update-flexible
 */
export async function updateFlexibleController(req, res) {
  try {
    const {
      ad_account_id,
      access_token: tokenFromFE,
      campaignsList,
    } = req.body;

    // L·∫•y Access Token
    const user = await User.findById(req.user?._id).select("+facebookAccessToken");
    if (!user) {
      return res.status(401).json({
        success: false,
        message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i ho·∫∑c ch∆∞a ƒëƒÉng nh·∫≠p.",
      });
    }
    const access_token = user.facebookAccessToken || tokenFromFE;

    if (!ad_account_id || !access_token) {
      return res.status(400).json({
        success: false,
        message: "Thi·∫øu ad_account_id ho·∫∑c access_token.",
      });
    }

    // Ki·ªÉm tra quy·ªÅn s·ªü h·ªØu t√†i kho·∫£n qu·∫£ng c√°o
    const account = await AdsAccount.findOne({
      external_id: ad_account_id,
      $or: [
        { user: req.user._id },
        { shop_admin_id: req.user._id },
        { shop_user_id: req.user._id },
      ],
    });

    if (!account) {
      return res.status(403).json({
        success: false,
        message: "T√†i kho·∫£n qu·∫£ng c√°o kh√¥ng thu·ªôc quy·ªÅn s·ªü h·ªØu c·ªßa b·∫°n.",
      });
    }

    // Validate d·ªØ li·ªáu ƒë·∫ßu v√†o
    if (!campaignsList || !Array.isArray(campaignsList) || campaignsList.length === 0) {
      return res.status(400).json({
        success: false,
        message: "Thi·∫øu danh s√°ch campaigns ho·∫∑c danh s√°ch r·ªóng.",
      });
    }

    console.log(`B·∫Øt ƒë·∫ßu update ${campaignsList.length} campaigns`);

    // Chu·∫©n b·ªã d·ªØ li·ªáu (‚ö†Ô∏è KH√îNG ghi ƒë√® created_by khi update)
    const enrichedCampaignsList = campaignsList.map(campaign => ({
      ...campaign,
      account_id: account._id,
      shop_id: account.shop_id || req.user.shop_id,
      // ‚ö†Ô∏è Kh√¥ng set created_by khi update - ch·ªâ set khi t·∫°o m·ªõi trong service
      adsets: (campaign.adsets || []).map(adset => ({
        ...adset,
        ads: (adset.ads || []).map(ad => ({
          ...ad,
          creative: ad.creative ? {
            ...ad.creative,
          } : undefined
        }))
      }))
    }));

    // G·ªçi service update c·∫•u tr√∫c linh ho·∫°t
    const result = await updateFlexibleService({
      ad_account_id,
      access_token,
      campaignsList: enrichedCampaignsList,
    });

    return res.status(200).json({
      success: result.success,
      message: result.message,
      data: result,
    });

  } catch (error) {
    console.error("‚ùå L·ªói update flexible structure:", error);
    const error_user_msg = error?.response?.data?.error_user_msg || error.message;
    const status = error?.response?.status || 500;

    return res.status(status).json({
      success: false,
      message: "C·∫≠p nh·∫≠t c·∫•u tr√∫c linh ho·∫°t th·∫•t b·∫°i.",
      error_user_msg,
    });
  }
}

/**
 * üîç Helper: Ki·ªÉm tra xem ID c√≥ ph·∫£i ObjectId h·ª£p l·ªá kh√¥ng (kh√¥ng ph·∫£i temp ID)
 */
function isValidObjectId(id) {
  if (!id) return false;
  // Ki·ªÉm tra format ObjectId v√† kh√¥ng ph·∫£i temp ID
  return mongoose.Types.ObjectId.isValid(id) && !id.toString().startsWith('temp_');
}

/**
 * üíæ Controller: L∆∞u nh√°p campaign/adset/ad
 * POST /api/ads-wizard/save-draft
 */
export async function saveDraftController(req, res) {
  try {
    const { ad_account_id, campaigns } = req.body;
    
    if (!ad_account_id) {
      return res.status(400).json({
        success: false,
        message: "Thi·∫øu ad_account_id"
      });
    }
    
    if (!campaigns || campaigns.length === 0) {
      return res.status(400).json({
        success: false,
        message: "Thi·∫øu d·ªØ li·ªáu campaigns"
      });
    }

    // Ki·ªÉm tra quy·ªÅn s·ªü h·ªØu t√†i kho·∫£n qu·∫£ng c√°o
    const account = await AdsAccount.findOne({
      external_id: ad_account_id,
      $or: [
        { user: req.user._id },
        { shop_admin_id: req.user._id },
        { shop_user_id: req.user._id },
      ],
    });

    if (!account) {
      return res.status(403).json({
        success: false,
        message: "T√†i kho·∫£n qu·∫£ng c√°o kh√¥ng thu·ªôc quy·ªÅn s·ªü h·ªØu c·ªßa b·∫°n.",
      });
    }

    const savedItems = {
      campaigns: [],
      adsets: [],
      ads: [],
      creatives: []
    };

    // L∆∞u t·ª´ng campaign
    for (const campaignData of campaigns) {
      // ‚úÖ T·∫°o ho·∫∑c update Campaign draft (check ObjectId h·ª£p l·ªá)
      const campaignDoc = isValidObjectId(campaignData._id)
        ? await AdsCampaign.findByIdAndUpdate(
            campaignData._id,
            {
              name: campaignData.name,
              objective: campaignData.objective,
              status: 'DRAFT',
              daily_budget: campaignData.daily_budget,
              lifetime_budget: campaignData.lifetime_budget,
              external_account_id: ad_account_id,
              page_id: campaignData.facebookPageId,
              page_name: campaignData.facebookPage,
              updated_at: new Date()
            },
            { new: true }
          )
        : await AdsCampaign.create({
            name: campaignData.name,
            objective: campaignData.objective,
            status: 'DRAFT',
            daily_budget: campaignData.daily_budget,
            lifetime_budget: campaignData.lifetime_budget,
            external_account_id: ad_account_id,
            page_id: campaignData.facebookPageId,
            page_name: campaignData.facebookPage,
            account_id: account._id,
            shop_id: account.shop_id,
            created_by: req.user._id,
          });

      savedItems.campaigns.push(campaignDoc);

      // L∆∞u AdSets n·∫øu c√≥
      if (campaignData.adsets && campaignData.adsets.length > 0) {
        for (const adsetData of campaignData.adsets) {
          // ‚úÖ T·∫°o ho·∫∑c update AdSet draft (check ObjectId h·ª£p l·ªá)
          const adsetDoc = isValidObjectId(adsetData._id)
            ? await AdsSet.findByIdAndUpdate(
                adsetData._id,
                {
                  name: adsetData.name,
                  status: 'DRAFT',
                  campaign_id: campaignDoc._id,
                  daily_budget: adsetData.budgetAmount,
                  targeting: adsetData.targeting,
                  optimization_goal: adsetData.optimization_goal,
                  billing_event: adsetData.billing_event,
                  bid_strategy: adsetData.bid_strategy,
                  updated_at: new Date()
                },
                { new: true }
              )
            : await AdsSet.create({
                name: adsetData.name,
                status: 'DRAFT',
                campaign_id: campaignDoc._id,
                external_account_id: ad_account_id,
                daily_budget: adsetData.budgetAmount,
                targeting: adsetData.targeting,
                optimization_goal: adsetData.optimization_goal,
                billing_event: adsetData.billing_event,
                bid_strategy: adsetData.bid_strategy,
              });

          savedItems.adsets.push(adsetDoc);

          // L∆∞u Ads n·∫øu c√≥
          if (adsetData.ads && adsetData.ads.length > 0) {
            for (const adData of adsetData.ads) {
              // ‚úÖ T·∫°o ho·∫∑c update Ad draft (check ObjectId h·ª£p l·ªá)
              const adDoc = isValidObjectId(adData._id)
                ? await Ads.findByIdAndUpdate(
                    adData._id,
                    {
                      name: adData.name,
                      status: 'DRAFT',
                      set_id: adsetDoc._id,
                      updated_at: new Date()
                    },
                    { new: true }
                  )
                : await Ads.create({
                    name: adData.name,
                    status: 'DRAFT',
                    set_id: adsetDoc._id,
                    external_account_id: ad_account_id,
                  });

              savedItems.ads.push(adDoc);

              // ‚úÖ L∆∞u Creative n·∫øu c√≥ d·ªØ li·ªáu creative
              if (adData.primaryText || adData.headline || adData.mediaUrl || adData.destinationUrl) {
                try {
                  // Ki·ªÉm tra xem ƒë√£ c√≥ creative cho ad n√†y ch∆∞a
                  let creativeDoc = await Creative.findOne({ ads_id: adDoc._id });
                  
                  const creativeData = {
                    name: adData.name + ' Creative',
                    ads_id: adDoc._id,
                    page_id: campaignData.facebookPageId,
                    object_story_spec: {
                      page_id: campaignData.facebookPageId,
                      link_data: {
                        message: adData.primaryText || '',
                        link: adData.destinationUrl || 'https://fchat.vn',
                        name: adData.headline || '',
                        description: adData.description || '',
                        call_to_action: {
                          type: adData.cta || 'LEARN_MORE',
                        },
                        ...(adData.mediaUrl && { picture: adData.mediaUrl }),
                      },
                    },
                  };

                  if (creativeDoc) {
                    // Update creative hi·ªán c√≥
                    creativeDoc = await Creative.findByIdAndUpdate(
                      creativeDoc._id,
                      creativeData,
                      { new: true }
                    );
                  } else {
                    // T·∫°o m·ªõi creative
                    creativeDoc = await Creative.create(creativeData);
                  }

                  savedItems.creatives.push(creativeDoc);
                } catch (creativeError) {
                  console.error('‚ö†Ô∏è L·ªói khi l∆∞u creative:', creativeError);
                  // Kh√¥ng throw error, ti·∫øp t·ª•c l∆∞u ad kh√°c
                }
              }
            }
          }
        }
      }
    }

    return res.status(200).json({
      success: true,
      message: 'ƒê√£ l∆∞u nh√°p th√†nh c√¥ng',
      data: savedItems
    });

  } catch (error) {
    console.error('‚ùå L·ªói l∆∞u draft:', error);
    return res.status(500).json({
      success: false,
      message: 'L·ªói khi l∆∞u nh√°p',
      error: error.message
    });
  }
}
