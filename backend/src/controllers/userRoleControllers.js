import UserRole from "../models/userRole.model.js";
import Role from "../models/role.model.js";
import User from "../models/user.model.js";
import Shop from "../models/shop.model.js";

/**
 * üéØ G√°n role cho user
 */
export const assignRole = async (req, res) => {
  try {
    const { userId, roleName, shopId, assignedBy, source } = req.body;

    // üîπ Ki·ªÉm tra user t·ªìn t·∫°i
    const user = await User.findById(userId);
    if (!user) {
      return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng." });
    }

    // üîπ T√¨m role theo t√™n
    const role = await Role.findOne({ role_name: roleName });
    if (!role) {
      return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y role." });
    }

    // üîπ N·∫øu c√≥ shopId th√¨ ki·ªÉm tra shop t·ªìn t·∫°i
    if (shopId) {
      const shop = await Shop.findById(shopId);
      if (!shop) {
        return res.status(404).json({ success: false, message: "Shop kh√¥ng t·ªìn t·∫°i." });
      }
    }

    // üîπ Ki·ªÉm tra tr√πng
    const existing = await UserRole.findOne({
      user_id: userId,
      role_id: role._id,
      shop_id: shopId || null,
    });
    if (existing) {
      return res.status(400).json({
        success: false,
        message: "Ng∆∞·ªùi d√πng ƒë√£ ƒë∆∞·ª£c g√°n role n√†y r·ªìi.",
      });
    }

    // üîπ T·∫°o userRole m·ªõi
    const userRole = await UserRole.create({
      user_id: userId,
      role_id: role._id,
      shop_id: shopId || null,
      assigned_by: assignedBy || req.user?._id || null,
      source: source || "manual",
    });

    const populated = await userRole
      .populate("user_id", "full_name email")
      .populate("role_id", "role_name description")
      .populate("shop_id", "shop_name");

    return res.status(201).json({
      success: true,
      message: "G√°n role cho ng∆∞·ªùi d√πng th√†nh c√¥ng!",
      data: populated,
    });
  } catch (error) {
    console.error("‚ùå assignRole error:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói h·ªá th·ªëng, vui l√≤ng th·ª≠ l·∫°i sau.",
    });
  }
};

/**
 * üìã L·∫•y t·∫•t c·∫£ UserRole (ph√¢n quy·ªÅn to√†n h·ªá th·ªëng)
 */
export const getUserRoles = async (req, res) => {
  try {
    const data = await UserRole.find()
      .populate("user_id", "full_name email")
      .populate("role_id", "role_name description")
      .populate("shop_id", "shop_name");

    res.status(200).json({
      success: true,
      count: data.length,
      data,
    });
  } catch (error) {
    console.error("‚ùå getUserRoles error:", error);
    res.status(500).json({
      success: false,
      message: "Kh√¥ng th·ªÉ l·∫•y danh s√°ch UserRole.",
    });
  }
};

/**
 * üîç L·∫•y UserRole theo ID
 */
export const getUserRoleById = async (req, res) => {
  try {
    const userRole = await UserRole.findById(req.params.id)
      .populate("user_id", "full_name email")
      .populate("role_id", "role_name description")
      .populate("shop_id", "shop_name");

    if (!userRole) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y UserRole.",
      });
    }

    res.status(200).json({ success: true, data: userRole });
  } catch (error) {
    console.error("‚ùå getUserRoleById error:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói h·ªá th·ªëng.",
    });
  }
};

/**
 * üë§ L·∫•y danh s√°ch role c·ªßa 1 user
 */
export const getRolesByUser = async (req, res) => {
  try {
    const { userId } = req.params;
    const roles = await UserRole.find({ user_id: userId })
      .populate("role_id", "role_name description permissions")
      .populate("shop_id", "shop_name");

    if (!roles.length) {
      return res.status(404).json({ success: false, message: "Ng∆∞·ªùi d√πng ch∆∞a ƒë∆∞·ª£c g√°n role n√†o." });
    }

    res.status(200).json({ success: true, data: roles });
  } catch (error) {
    console.error("‚ùå getRolesByUser error:", error);
    res.status(500).json({ success: false, message: "L·ªói h·ªá th·ªëng." });
  }
};

/**
 * ‚úèÔ∏è C·∫≠p nh·∫≠t UserRole (ƒë·ªïi role ho·∫∑c shop)
 */
export const updateUserRole = async (req, res) => {
  try {
    const { roleName, shopId, revoked_at } = req.body;
    const updateData = {};

    if (roleName) {
      const role = await Role.findOne({ role_name: roleName });
      if (!role) return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y role m·ªõi." });
      updateData.role_id = role._id;
    }
    if (shopId) updateData.shop_id = shopId;
    if (revoked_at) updateData.revoked_at = revoked_at;

    const userRole = await UserRole.findByIdAndUpdate(req.params.id, updateData, { new: true })
      .populate("user_id", "full_name email")
      .populate("role_id", "role_name description")
      .populate("shop_id", "shop_name");

    if (!userRole) {
      return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y UserRole." });
    }

    res.status(200).json({ success: true, message: "C·∫≠p nh·∫≠t UserRole th√†nh c√¥ng!", data: userRole });
  } catch (error) {
    console.error("‚ùå updateUserRole error:", error);
    res.status(500).json({ success: false, message: "L·ªói h·ªá th·ªëng." });
  }
};

/**
 * üóëÔ∏è X√≥a UserRole
 */
export const deleteUserRole = async (req, res) => {
  try {
    const userRole = await UserRole.findByIdAndDelete(req.params.id);
    if (!userRole) {
      return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y UserRole." });
    }

    res.status(200).json({ success: true, message: "ƒê√£ x√≥a UserRole th√†nh c√¥ng." });
  } catch (error) {
    console.error("‚ùå deleteUserRole error:", error);
    res.status(500).json({ success: false, message: "L·ªói h·ªá th·ªëng." });
  }
};
