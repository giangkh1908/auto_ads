import { useRef, useState, forwardRef, useImperativeHandle } from "react";
import {
  Circle,
  Image,
  ChevronDown,
  Facebook,
  FileText,
  Bot,
  MousePointer,
  X,
} from "lucide-react";
import AiPopup from "../AiPopup/AiPopup";
import "../AiPopup/AiPopup.css";
import axiosInstance from "../../../../utils/axios";
import "./AdStep.css";
import { useToast } from "../../../../hooks/useToast";
import { validateNonEmpty } from "../../../../utils/validation";

function AdStepInner({ ad, setAd, adset }, ref) {
  const fileInputRef = useRef(null);
  const [uploading, setUploading] = useState(false);
  const [showAIGeneration, setShowAIGeneration] = useState(false);
  const [aiImages, setAiImages] = useState([]);
  const [selectedAiImages, setSelectedAiImages] = useState([]);
  const [showAIConfig, setShowAIConfig] = useState(false);
  const [isGeneratingImages, setIsGeneratingImages] = useState(false);
  const toast = useToast();

  // Get detailed requirements and guidance based on destination_type
  const getDestinationGuidance = () => {
    const destType = adset?.destination_type;
    // const optimizationGoal = adset?.optimization_goal;
    
    switch(destType) {
      case 'ON_VIDEO':
        return {
          title: 'üé¨ M·ª•c ti√™u: L∆∞·ª£t xem video',
          mediaType: 'video',
          mediaLabel: 'Video',
          mediaAccept: 'video/*',
          mediaDescription: '‚ö†Ô∏è B·∫ÆT BU·ªòC upload video',
          requirements: [
            '‚úÖ Video ph·∫£i h·∫•p d·∫´n trong 3 gi√¢y ƒë·∫ßu',
            '‚úÖ ƒê·ªô d√†i khuy·∫øn ngh·ªã: 15-60 gi√¢y',
            '‚úÖ ƒê·ªãnh d·∫°ng: MP4, MOV (t·ªëi ƒëa 4GB)',
            '‚úÖ T·ª∑ l·ªá: 9:16 (Stories), 1:1 (Feed), 16:9 (Landscape)',
          ],
          ctaRecommendations: ['Xem th√™m', 'T√¨m hi·ªÉu th√™m', 'Xem ngay'],
          destinationNote: 'URL ƒë√≠ch s·∫Ω hi·ªÉn th·ªã khi ng∆∞·ªùi d√πng nh·∫•p v√†o video ho·∫∑c CTA'
        };
        
      case 'ON_POST':
        return {
          title: 'üí¨ M·ª•c ti√™u: T∆∞∆°ng t√°c b√†i vi·∫øt',
          mediaType: 'image-or-video',
          mediaLabel: '·∫¢nh ho·∫∑c Video',
          mediaAccept: 'image/*,video/*',
          mediaDescription: 'üì∏ ·∫¢nh ho·∫∑c video ƒë·ªÉ tƒÉng t∆∞∆°ng t√°c',
          requirements: [
            '‚úÖ N·ªôi dung vƒÉn b·∫£n ph·∫£i khuy·∫øn kh√≠ch t∆∞∆°ng t√°c (like, comment, share)',
            '‚úÖ ·∫¢nh: ƒê·ªô ph√¢n gi·∫£i t·ªëi thi·ªÉu 1080x1080px',
            '‚úÖ Video: ƒê·ªô d√†i 15-30 gi√¢y cho t∆∞∆°ng t√°c t·ªët nh·∫•t',
            '‚úÖ S·ª≠ d·ª•ng c√¢u h·ªèi ho·∫∑c call-to-action trong vƒÉn b·∫£n',
          ],
          ctaRecommendations: ['T√¨m hi·ªÉu th√™m', 'Xem th√™m', 'Li√™n h·ªá ngay'],
          destinationNote: 'T·∫≠p trung v√†o engagement, URL ƒë√≠ch l√† ph·ª• (c√≥ th·ªÉ d·∫´n ƒë·∫øn trang fanpage ho·∫∑c website)'
        };
        
      case 'ON_PAGE':
        return {
          title: 'üëç M·ª•c ti√™u: L∆∞·ª£t th√≠ch trang',
          mediaType: 'image-or-video',
          mediaLabel: '·∫¢nh ho·∫∑c Video',
          mediaAccept: 'image/*,video/*',
          mediaDescription: 'üì∏ ·∫¢nh/video gi·ªõi thi·ªáu trang c·ªßa b·∫°n',
          requirements: [
            '‚úÖ N·ªôi dung ph·∫£i th·ªÉ hi·ªán r√µ gi√° tr·ªã c·ªßa trang Facebook',
            '‚úÖ Highlight nh·ªØng l·ª£i √≠ch khi like trang (c·∫≠p nh·∫≠t, ∆∞u ƒë√£i...)',
            '‚úÖ ·∫¢nh cover ho·∫∑c logo trang n√™n xu·∫•t hi·ªán',
            '‚úÖ VƒÉn b·∫£n ch√≠nh: M√¥ t·∫£ ng·∫Øn g·ªçn v·ªÅ trang',
          ],
          ctaRecommendations: ['Th√≠ch trang', 'Theo d√µi', 'T√¨m hi·ªÉu th√™m'],
          destinationNote: 'üéØ Qu·∫£ng c√°o s·∫Ω hi·ªÉn th·ªã n√∫t "Th√≠ch trang" tr·ª±c ti·∫øp, URL ƒë√≠ch th∆∞·ªùng l√† link trang Facebook'
        };
        
      case 'ON_EVENT':
        return {
          title: 'üìÖ M·ª•c ti√™u: Ph·∫£n h·ªìi s·ª± ki·ªán',
          mediaType: 'image-or-video',
          mediaLabel: '·∫¢nh ho·∫∑c Video',
          mediaAccept: 'image/*,video/*',
          mediaDescription: 'üéâ ·∫¢nh/video v·ªÅ s·ª± ki·ªán',
          requirements: [
            '‚úÖ Hi·ªÉn th·ªã r√µ th√¥ng tin s·ª± ki·ªán (ng√†y, gi·ªù, ƒë·ªãa ƒëi·ªÉm)',
            '‚úÖ S·ª≠ d·ª•ng ·∫£nh ch·∫•t l∆∞·ª£ng cao v·ªÅ venue ho·∫∑c s·ª± ki·ªán t∆∞∆°ng t·ª±',
            '‚úÖ VƒÉn b·∫£n ch√≠nh: M√¥ t·∫£ highlights c·ªßa s·ª± ki·ªán',
            '‚úÖ T·∫°o c·∫£m gi√°c FOMO (Fear of Missing Out)',
          ],
          ctaRecommendations: ['Quan t√¢m', 'Tham gia', 'Xem s·ª± ki·ªán'],
          destinationNote: 'üéØ Qu·∫£ng c√°o s·∫Ω hi·ªÉn th·ªã n√∫t ph·∫£n h·ªìi s·ª± ki·ªán (Quan t√¢m/Tham gia), URL ƒë√≠ch th∆∞·ªùng l√† link s·ª± ki·ªán Facebook'
        };
        
      case 'MESSAGING_APPS':
        return {
          title: 'üí¨ M·ª•c ti√™u: B·∫Øt ƒë·∫ßu h·ªôi tho·∫°i',
          mediaType: 'image-or-video',
          mediaLabel: '·∫¢nh ho·∫∑c Video',
          mediaAccept: 'image/*,video/*',
          mediaDescription: 'üí¨ ·∫¢nh/video khuy·∫øn kh√≠ch nh·∫Øn tin',
          requirements: [
            '‚úÖ N·ªôi dung ph·∫£i khuy·∫øn kh√≠ch ng∆∞·ªùi d√πng nh·∫Øn tin (H·ªèi, T∆∞ v·∫•n, H·ªó tr·ª£...)',
            '‚úÖ VƒÉn b·∫£n ch√≠nh: ƒê·ªÅ c·∫≠p r√µ l·ª£i √≠ch khi nh·∫Øn tin (t∆∞ v·∫•n mi·ªÖn ph√≠, ∆∞u ƒë√£i...)',
            '‚úÖ ·∫¢nh n√™n th·ªÉ hi·ªán s·ª± th√¢n thi·ªán, s·∫µn s√†ng h·ªó tr·ª£',
            '‚úÖ Chu·∫©n b·ªã auto-reply ho·∫∑c chatbot ƒë·ªÉ ph·∫£n h·ªìi nhanh',
          ],
          ctaRecommendations: ['Nh·∫Øn tin', 'Li√™n h·ªá ngay', 'Chat ngay'],
          destinationNote: 'üéØ Qu·∫£ng c√°o s·∫Ω c√≥ n√∫t "Nh·∫Øn tin" m·ªü Messenger, URL ƒë√≠ch kh√¥ng quan tr·ªçng (c√≥ th·ªÉ ƒë·ªÉ link fanpage)'
        };
        
      default:
        return {
          title: 'üì¢ T·∫°o qu·∫£ng c√°o',
          mediaType: 'image-or-video',
          mediaLabel: '·∫¢nh ho·∫∑c Video',
          mediaAccept: 'image/*,video/*',
          mediaDescription: 'H·ªó tr·ª£ ·∫£nh ho·∫∑c video',
          requirements: [
            '‚úÖ N·ªôi dung ph·∫£i r√µ r√†ng, h·∫•p d·∫´n',
            '‚úÖ ·∫¢nh: ƒê·ªô ph√¢n gi·∫£i t·ªëi thi·ªÉu 1080x1080px',
            '‚úÖ Video: ƒê·ªô d√†i 15-60 gi√¢y',
          ],
          ctaRecommendations: ['T√¨m hi·ªÉu th√™m', 'Xem th√™m'],
          destinationNote: 'URL ƒë√≠ch l√† trang b·∫°n mu·ªën ng∆∞·ªùi d√πng truy c·∫≠p'
        };
    }
  };

  const guidance = getDestinationGuidance();

  // AI context tracking
  const [aiProvider, setAiProvider] = useState('openai');
  const [contextId, setContextId] = useState(null);
  const [isGenerating, setIsGenerating] = useState({
    headline: false,
    primaryText: false,
    description: false,
  });

  // Function to handle file upload
  const handleFileSelect = async (e) => {
    const file = e.target.files[0];
    if (!file) return;

    const formData = new FormData();
    formData.append("file", file);
    try {
      setUploading(true);
      const res = await axiosInstance.post("/api/upload/media", formData, {
        headers: { "Content-Type": "multipart/form-data" },
      });

      if (res.data?.success && res.data?.url) {
        // L·∫•y file ƒë·∫ßu ti√™n trong formData
        const file = formData.get("file") || formData.get("media");
        const fileType = file?.type || "";

        // X√°c ƒë·ªãnh lo·∫°i media
        const mediaType = fileType.startsWith("video/")
          ? "video"
          : fileType.startsWith("image/")
            ? "image"
            : "unknown";

        setAd((prev) => ({
          ...prev,
          media: mediaType,
          mediaUrl: res.data.url,
        }));

        toast.success("T·∫£i file th√†nh c√¥ng");
      } else {
        toast.error(res.data?.message || "Upload th·∫•t b·∫°i");
      }
    } catch (err) {
      console.error("Upload error:", err);
      toast.error("Kh√¥ng th·ªÉ upload file. Vui l√≤ng th·ª≠ l·∫°i.");
    } finally {
      setUploading(false);
    }
  };

  // Function to generate text content using AI
  const generateAIContent = async (field, maxLength = 100) => {
    if (!contextId) {
      toast.warning("Vui l√≤ng thi·∫øt l·∫≠p AI tr∆∞·ªõc", {
        description: "H√£y nh·∫•n 'T·∫°o b·∫±ng AI' ƒë·ªÉ thi·∫øt l·∫≠p tham s·ªë AI",
      });
      return;
    }

    try {
      setIsGenerating(prev => ({ ...prev, [field]: true }));

      const target = field === 'primaryText' ? 'body' : field;
      const model =
        aiProvider === 'gemini' ? 'gemini-2.5-flash' : 'gpt-4o-mini';
      const response = await axiosInstance.post('/api/ai/generate-text', {
        context_id: contextId,
        target,
        constraints: { max_len: maxLength },
        model
      });

      if (response.data && response.data.success) {
        setAd(prev => ({ ...prev, [field]: response.data.chosen }));
        toast.success(`ƒê√£ t·∫°o ${field === 'headline' ? 'ti√™u ƒë·ªÅ' :
          field === 'primaryText' ? 'vƒÉn b·∫£n ch√≠nh' :
            field === 'description' ? 'm√¥ t·∫£' : 'n·ªôi dung'}`);
      } else {
        toast.error("Kh√¥ng th·ªÉ t·∫°o n·ªôi dung", {
          description: response.data?.message || "Vui l√≤ng th·ª≠ l·∫°i"
        });
      }
    } catch (error) {
      console.error(`Error generating ${field}:`, error);
      toast.error(`Kh√¥ng th·ªÉ t·∫°o ${field}`, {
        description: error.message
      });
    } finally {
      setIsGenerating(prev => ({ ...prev, [field]: false }));
    }
  };

  // Function to generate AI images based on context
  const generateAIImages = async () => {
    if (!contextId) {
      toast.warning("Vui l√≤ng thi·∫øt l·∫≠p AI tr∆∞·ªõc", {
        description: "H√£y nh·∫•n 'T·∫°o b·∫±ng AI' ƒë·ªÉ thi·∫øt l·∫≠p tham s·ªë AI",
      });
      return;
    }

    try {
      setIsGeneratingImages(true);
      setShowAIGeneration(true);
      const model =
        aiProvider === 'gemini' ? 'gemini-2.5-flash-image' : 'dall-e-2';
      // G·ªçi API ƒë·ªÉ t·∫°o h√¨nh ·∫£nh d·ª±a tr√™n context_id s·∫µn c√≥
      const response = await axiosInstance.post('/api/ai/images/generate', {
        context_id: contextId,
        count: 4, // S·ªë l∆∞·ª£ng ·∫£nh c·∫ßn t·∫°o
        aspect_ratio: '1:1', // T·ªâ l·ªá khung h√¨nh
        model
      }, {
        timeout: 60000 // 60 gi√¢y
      }
      );

      if (response.data && response.data.success && response.data.previews) {
        const generatedImages = response.data.previews.map((img, index) => ({
          id: `ai-${Date.now()}-${index}`,
          url: img.preview_url,
          selected: index === 0 // M·∫∑c ƒë·ªãnh ch·ªçn ·∫£nh ƒë·∫ßu ti√™n
        }));

        setAiImages(generatedImages);
        setSelectedAiImages([generatedImages[0]]);

        // T·ª± ƒë·ªông s·ª≠ d·ª•ng ·∫£nh ƒë·∫ßu ti√™n cho qu·∫£ng c√°o
        setAd(prev => ({
          ...prev,
          media: 'image',
          mediaUrl: generatedImages[0].url
        }));

        toast.success(`ƒê√£ t·∫°o ${generatedImages.length} h√¨nh ·∫£nh d·ª±a tr√™n ng·ªØ c·∫£nh`);
      } else {
        // Fallback to placeholder images for testing
        const placeholderImages = Array.from({ length: 4 }, (_, i) => ({
          id: `placeholder-${Date.now()}-${i}`,
          url: `https://picsum.photos/512/512?random=${Date.now() + i}`,
          selected: i === 0
        }));

        setAiImages(placeholderImages);
        setSelectedAiImages([placeholderImages[0]]);

        setAd(prev => ({
          ...prev,
          media: 'image',
          mediaUrl: placeholderImages[0].url
        }));

        toast.info("ƒêang s·ª≠ d·ª•ng h√¨nh ·∫£nh m·∫´u", {
          description: response.data?.message || "API ch∆∞a s·∫µn s√†ng"
        });
      }
    } catch (error) {
      console.error("Error generating AI images:", error);

      // Th√¥ng b√°o l·ªói c·ª• th·ªÉ h∆°n
      let errorMessage = "Kh√¥ng th·ªÉ t·∫°o h√¨nh ·∫£nh AI";
      if (error.code === "ECONNABORTED") {
        errorMessage = "Qu√° th·ªùi gian ch·ªù khi t·∫°o ·∫£nh. Vui l√≤ng th·ª≠ l·∫°i sau.";
      } else if (error.response) {
        errorMessage = `L·ªói m√°y ch·ªß: ${error.response.status}`;
      }

      // Fall back to placeholder images
      const placeholderImages = Array.from({ length: 4 }, (_, i) => ({
        id: `fallback-${Date.now()}-${i}`,
        url: `https://picsum.photos/512/512?random=${Date.now() + i}`,
        selected: i === 0
      }));

      setAiImages(placeholderImages);
      setSelectedAiImages([placeholderImages[0]]);

      setAd(prev => ({
        ...prev,
        media: 'image',
        mediaUrl: placeholderImages[0].url
      }));

      toast.error(errorMessage, {
        description: error.code === "ECONNABORTED"
          ? "Vi·ªác t·∫°o ·∫£nh AI c√≥ th·ªÉ m·∫•t nhi·ªÅu th·ªùi gian. ƒêang s·ª≠ d·ª•ng ·∫£nh m·∫´u thay th·∫ø."
          : error.message
      });
    } finally {
      setIsGeneratingImages(false);
    }
  };

  // Function to handle AI image selection
  const handleImageSelection = (imageId) => {
    const newImages = aiImages.map((img) => ({
      ...img,
      selected: img.id === imageId
    }));

    setAiImages(newImages);

    const selectedImage = newImages.find(img => img.id === imageId);
    if (selectedImage) {
      setAd(prev => ({
        ...prev,
        media: 'image',
        mediaUrl: selectedImage.url
      }));
      setSelectedAiImages([selectedImage]);
    }
  };

  // Expose validate() to parent
  useImperativeHandle(
    ref,
    () => ({
      validate: () => {
        const okName = !!ad?.name && String(ad.name).trim() !== "";
        const okMedia = !!ad?.mediaUrl;
        const okUrl =
          !!ad?.destinationUrl && String(ad.destinationUrl).trim() !== "";
        
        // Validate media type matches destination_type requirements
        let okMediaType = true;
        if (okMedia && guidance.mediaType === 'video' && ad.media !== 'video') {
          toast.warning("M·ª•c ti√™u xem video y√™u c·∫ßu upload file video");
          okMediaType = false;
        }
        
        if (!okName) validateNonEmpty(ad.name, "t√™n qu·∫£ng c√°o", toast);
        if (!okMedia) toast.warning("Vui l√≤ng ch·ªçn file ph∆∞∆°ng ti·ªán");
        if (!okUrl) validateNonEmpty(ad.destinationUrl, "URL ƒë√≠ch", toast);
        return okName && okMedia && okMediaType && okUrl;
      },
    }),
    [ad, toast, guidance]
  );

  return (
    <div className="ad-step">
      <div className="config-scroll-container">
        {/* Guidance Banner */}
        {adset?.destination_type && (
          <div style={{
            background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
            borderRadius: '12px',
            padding: '20px',
            marginBottom: '24px',
            color: 'white',
            boxShadow: '0 4px 6px rgba(0,0,0,0.1)'
          }}>
            <h3 style={{ margin: '0 0 16px 0', fontSize: '18px', fontWeight: '600' }}>
              {guidance.title}
            </h3>
            <div style={{ background: 'rgba(255,255,255,0.15)', borderRadius: '8px', padding: '16px', marginBottom: '12px' }}>
              <h4 style={{ margin: '0 0 12px 0', fontSize: '14px', fontWeight: '600', opacity: 0.9 }}>
                üìã Y√™u c·∫ßu n·ªôi dung:
              </h4>
              {guidance.requirements.map((req, idx) => (
                <div key={idx} style={{ fontSize: '13px', marginBottom: '6px', lineHeight: '1.6' }}>
                  {req}
                </div>
              ))}
            </div>
            <div style={{ background: 'rgba(255,255,255,0.15)', borderRadius: '8px', padding: '12px', fontSize: '13px' }}>
              <strong>üí° G·ª£i √Ω CTA:</strong> {guidance.ctaRecommendations.join(', ')}
            </div>
            <div style={{ marginTop: '12px', fontSize: '12px', fontStyle: 'italic', opacity: 0.85 }}>
              ‚ÑπÔ∏è {guidance.destinationNote}
            </div>
          </div>
        )}

        <div className="btn-generate-ai-container">
          <button
            className="btn-generate-ai"
            onClick={() => {
              setShowAIConfig(!showAIConfig);
            }}
          >
            T·∫°o b·∫±ng AI
          </button>

          {/* AI Config Modal */}
          <AiPopup
            isOpen={showAIConfig}
            onClose={() => setShowAIConfig(false)}
            onConfirm={(config) => {
              // X·ª≠ l√Ω config v√† g·ªçi API ƒë·ªÉ l·∫•y context_id
              const languageMap = {
                "Ti·∫øng Vi·ªát": "vi",
                "English": "en",
                "‰∏≠Êñá": "zh"
              };
              const toArray = (v) =>
                Array.isArray(v)
                  ? v
                  : String(v || '')
                    .split(',')
                    .map(s => s.trim())
                    .filter(Boolean);
              const mainKeywords = [
                ...toArray(config.mainKeywords),
                ...toArray(config.synonymousKeywords),
                ...toArray(config.main_keywords),           // ph√≤ng tr∆∞·ªùng h·ª£p FE ƒë√£ g·ª≠i d·∫°ng array
              ];

              if (mainKeywords.length === 0) {
                toast.warning("Vui l√≤ng nh·∫≠p √≠t nh·∫•t m·ªôt t·ª´ kh√≥a ch√≠nh");
                return;
              }
              setAiProvider(config.ai_provider || 'openai');
              // G·ªçi API ƒë·ªÉ x√°c nh·∫≠n context
              axiosInstance.post('/api/ai/context/confirm', {
                language: languageMap[config.language] || "vi",
                tone: config.tone,
                personalization: config.personalization,
                main_keywords: mainKeywords
              })
                .then(response => {
                  if (response.data && response.data.success) {
                    setContextId(response.data.context_id);
                    toast.success("ƒê√£ thi·∫øt l·∫≠p AI th√†nh c√¥ng");
                  }
                })
                .catch(error => {
                  console.error("Error confirming AI context:", error);
                  toast.error("Kh√¥ng th·ªÉ thi·∫øt l·∫≠p AI", {
                    description: error.message
                  });
                });
            }}
          />
        </div>

        {/* Ad Name Section */}
        <div className="config-section">
          <div className="section-header-ads">
            <Circle size={8} fill="#2563eb" color="#2563eb" />
            <h3 className="section-title-ads">T√™n qu·∫£ng c√°o</h3>
          </div>
          <input
            type="text"
            className="ad-name-input"
            value={ad.name}
            onChange={(e) =>
              setAd((prev) => ({ ...prev, name: e.target.value }))
            }
            onBlur={() => validateNonEmpty(ad.name, "t√™n qu·∫£ng c√°o", toast)}
            placeholder="Qu·∫£ng c√°o m·ªõi"
          />
        </div>

        {/* Ad Content Section */}
        <div className="config-section">
          <div className="section-header-ads">
            <FileText size={16} color="#2563eb" />
            <h3 className="section-title-ads">N·ªôi dung qu·∫£ng c√°o</h3>
          </div>
          <div className="ad-content-fields">
            {/* Headline */}
            <div className="field-group">
              <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                <label className="field-label">Ti√™u ƒë·ªÅ</label>
                <button
                  onClick={() => generateAIContent('headline', 40)}
                  disabled={isGenerating.headline || !contextId}
                  style={{
                    background: '#f3f4f6',
                    border: '1px solid #d1d5db',
                    borderRadius: '4px',
                    padding: '4px 12px',
                    fontSize: '13px',
                    cursor: 'pointer',
                    display: 'flex',
                    alignItems: 'center',
                    gap: '4px'
                  }}
                >
                  <Bot size={14} />
                  {isGenerating.headline ? 'ƒêang t·∫°o...' : 'AI'}
                </button>
              </div>
              <input
                type="text"
                className="headline-input"
                value={ad.headline}
                onChange={(e) =>
                  setAd((prev) => ({ ...prev, headline: e.target.value }))
                }
                placeholder="S·∫£n ph·∫©m/D·ªãch v·ª• ch·∫•t l∆∞·ª£ng cao"
              />
            </div>

            {/* Primary Text */}
            <div className="field-group">
              <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                <label className="field-label">VƒÉn b·∫£n ch√≠nh</label>
                <button
                  onClick={() => generateAIContent('primaryText', 125)}
                  disabled={isGenerating.primaryText || !contextId}
                  style={{
                    background: '#f3f4f6',
                    border: '1px solid #d1d5db',
                    borderRadius: '4px',
                    padding: '4px 12px',
                    fontSize: '13px',
                    cursor: 'pointer',
                    display: 'flex',
                    alignItems: 'center',
                    gap: '4px'
                  }}
                >
                  <Bot size={14} />
                  {isGenerating.primaryText ? 'ƒêang t·∫°o...' : 'AI'}
                </button>
              </div>
              <textarea
                className="primary-text-input"
                value={ad.primaryText}
                onChange={(e) =>
                  setAd((prev) => ({ ...prev, primaryText: e.target.value }))
                }
                rows={4}
                placeholder="N·ªôi dung ch√≠nh c·ªßa qu·∫£ng c√°o..."
              />
            </div>

            {/* Description */}
            <div className="field-group">
              <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                <label className="field-label">M√¥ t·∫£</label>
                <button
                  onClick={() => generateAIContent('description', 30)}
                  disabled={isGenerating.description || !contextId}
                  style={{
                    background: '#f3f4f6',
                    border: '1px solid #d1d5db',
                    borderRadius: '4px',
                    padding: '4px 12px',
                    fontSize: '13px',
                    cursor: 'pointer',
                    display: 'flex',
                    alignItems: 'center',
                    gap: '4px'
                  }}
                >
                  <Bot size={14} />
                  {isGenerating.description ? 'ƒêang t·∫°o...' : 'AI'}
                </button>
              </div>
              <textarea
                className="description-input"
                value={ad.description || ""}
                onChange={(e) =>
                  setAd((prev) => ({ ...prev, description: e.target.value }))
                }
                rows={3}
                placeholder="M√¥ t·∫£ ng·∫Øn g·ªçn b·ªï sung..."
              />
            </div>

            {/* Call to Action */}
            <div className="field-group">
              <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                <label className="field-label">N√∫t k√™u g·ªçi h√†nh ƒë·ªông</label>
              </div>
              <select
                className="cta-select"
                value={ad.cta}
                onChange={(e) =>
                  setAd((prev) => ({ ...prev, cta: e.target.value }))
                }
              >
                <option value="Li√™n h·ªá ngay">Li√™n h·ªá ngay</option>
                <option value="Xem th√™m">Xem th√™m</option>
                <option value="Nh·∫≠n b√°o gi√°">Nh·∫≠n b√°o gi√°</option>
                <option value="ƒêƒÉng k√Ω ngay">ƒêƒÉng k√Ω ngay</option>
                <option value="ƒê·∫∑t ngay">ƒê·∫∑t ngay</option>
                <option value="Li√™n h·ªá v·ªõi ch√∫ng t√¥i">Li√™n h·ªá v·ªõi ch√∫ng t√¥i</option>
                <option value="T·∫£i xu·ªëng">T·∫£i xu·ªëng</option>
                <option value="Nh·∫≠n ∆∞u ƒë√£i">Nh·∫≠n ∆∞u ƒë√£i</option>
                <option value="Xem khuy·∫øn m√£i">Xem khuy·∫øn m√£i</option>
                <option value="Xem su·∫•t chi·∫øu">Xem su·∫•t chi·∫øu</option>
                <option value="T√¨m hi·ªÉu th√™m">T√¨m hi·ªÉu th√™m</option>
                <option value="Nghe ngay">Nghe ngay</option>
                <option value="ƒê·∫∑t h√†ng ngay">ƒê·∫∑t h√†ng ngay</option>
                <option value="Nh·∫≠n quy·ªÅn truy c·∫≠p">Nh·∫≠n quy·ªÅn truy c·∫≠p</option>
                <option value="ƒê·∫∑t l·ªãch h·∫πn">ƒê·∫∑t l·ªãch h·∫πn</option>
                <option value="Xem menu">Xem menu</option>
                <option value="Nh·∫≠n th√¥ng tin m·ªõi">Nh·∫≠n th√¥ng tin m·ªõi</option>
                <option value="Mua ngay">Mua ngay</option>
                <option value="ƒêƒÉng k√Ω">ƒêƒÉng k√Ω</option>
                <option value="ƒêƒÉng k√Ω d√†i h·∫°n">ƒêƒÉng k√Ω d√†i h·∫°n</option>
              </select>
            </div>

            {/* Destination URL */}
            <div className="field-group">
              <label className="field-label">* URL ƒë√≠ch</label>
              <input
                type="url"
                className="url-input"
                value={ad.destinationUrl || ""}
                onChange={(e) =>
                  setAd((prev) => ({ ...prev, destinationUrl: e.target.value }))
                }
                onBlur={() =>
                  validateNonEmpty(ad.destinationUrl, "URL ƒë√≠ch", toast)
                }
                placeholder="https://example.com"
              />
            </div>

            {/* Media File */}
            <div className="field-group">
              <label className="field-label">* File ph∆∞∆°ng ti·ªán ({guidance.mediaLabel})</label>
              <small style={{ display: 'block', marginBottom: '8px', color: '#6b7280', fontSize: '13px' }}>
                {guidance.mediaDescription}
              </small>
              <div className="media-buttons-container">
                <button
                  className="media-button upload-button"
                  onClick={() => fileInputRef.current.click()}
                  disabled={uploading}
                >
                  <Image size={18} className="media-icon" />

                  {uploading
                    ? "ƒêang t·∫£i l√™n..."
                    : ad.mediaUrl
                      ? "ƒê√£ ch·ªçn file"
                      : `Th√™m ${guidance.mediaLabel.toLowerCase()}`}
                </button>
                {guidance.mediaType !== 'video' && (
                  <button
                    className="media-button ai-button"
                    onClick={() => {
                      if (!contextId) {
                        toast.warning("Vui l√≤ng thi·∫øt l·∫≠p AI tr∆∞·ªõc", {
                          description: "H√£y nh·∫•n 'T·∫°o b·∫±ng AI' ƒë·ªÉ thi·∫øt l·∫≠p tham s·ªë AI",
                        });
                        return;
                      }

                      // G·ªçi h√†m t·∫°o ·∫£nh ngay l·∫≠p t·ª©c
                      generateAIImages();
                    }}
                    disabled={uploading || isGeneratingImages}
                  >
                    <Image size={18} className="button-icon" />
                    {isGeneratingImages ? "ƒêang t·∫°o ·∫£nh..." : "AI t·∫°o ·∫£nh"}
                  </button>
                )}
              </div>

              {/* AI Generation Section */}
              {showAIGeneration && (
                <div className="ai-generation-section">
                  <div className="ai-images-grid">
                    {isGeneratingImages ? (
                      // Loading text with wave effect
                      <div className="loading-wave-container">
                        <div className="loading-wave-text">
                          {'Vui l√≤ng ch·ªù ƒë·ª£i...'.split('').map((char, index) => (
                            <span key={index} style={{ animationDelay: `${index * 0.1}s` }}>
                              {char === ' ' ? '\u00A0' : char}
                            </span>
                          ))}
                        </div>
                      </div>
                    ) : (
                      // Rendered images
                      aiImages.map((image) => (
                        <div
                          key={image.id}
                          className={`ai-image-cell ${image.selected ? "selected" : ""}`}
                          onClick={() => handleImageSelection(image.id)}
                        >
                          <img src={image.url} alt="AI generated" className="ai-image" />
                        </div>
                      ))
                    )}
                  </div>

                  <div className="ai-info-section">
                    <div className="ai-info-text">
                      <div className="ai-info-line">
                        ·∫¢nh ƒë√£ t·∫°o {aiImages.length}/{aiImages.length}
                      </div>
                      <div className="ai-info-line">
                        ·∫¢nh c√≥ th·ªÉ th√™m {10 - aiImages.length}
                      </div>
                      <div className="ai-info-line">
                        ·∫¢nh ƒë√£ ch·ªçn {selectedAiImages.length}/{selectedAiImages.length}
                      </div>
                    </div>
                    <button
                      className="auto-select-button"
                      onClick={() => {
                        // Auto select all images
                        const allSelected = aiImages.map((img) => ({
                          ...img,
                          selected: true,
                        }));
                        setAiImages(allSelected);
                        setSelectedAiImages(allSelected);
                      }}
                    >
                      Ch·ªçn ·∫£nh t·ª± ƒë·ªông
                    </button>
                  </div>
                </div>
              )}

              {/* File input */}
              <input
                className="image-input"
                type="file"
                accept={guidance.mediaAccept}
                ref={fileInputRef}
                onChange={handleFileSelect}
              />
              {ad.mediaUrl && ad.media === "image" && (
                <div className="image-frame">
                  <img src={ad.mediaUrl} alt="Preview" />
                </div>
              )}
              {ad.mediaUrl && ad.media === "video" && (
                <div className="image-frame">
                  <video
                    src={ad.mediaUrl}
                    controls
                    style={{ width: "100%", borderRadius: 8 }}
                  />
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

const AdStep = forwardRef(AdStepInner);
export default AdStep;
