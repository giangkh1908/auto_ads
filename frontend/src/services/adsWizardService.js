import axiosInstance from '../utils/axios';

export const publishAdsWizard = async (wizardData) => {
  try {
    const response = await axiosInstance.post('/api/ads-wizard/publish', wizardData);
    return response.data;
  } catch (error) {
    // Rethrow original axios error to preserve error.response (including error_user_msg)
    throw handleError(error);
  }
};

export const updateAdsWizard = async (wizardData) => {
  try {
    const response = await axiosInstance.put(
      "/api/ads-wizard/update",
      wizardData
    );
    return response.data;
  } catch (error) {
    // Rethrow original axios error to preserve error.response (including error_user_msg)
    throw handleError(error);
  }
};

/**
 * üîÑ Update nhi·ªÅu campaigns v·ªõi c·∫•u tr√∫c linh ho·∫°t (cascade update)
 * H·ªó tr·ª£ update matching entities, t·∫°o m·ªõi n·∫øu ch∆∞a c√≥
 */
export const updateFlexibleAdsWizard = async (wizardData) => {
  try {
    const response = await axiosInstance.put(
      '/api/ads-wizard/update-flexible',
      wizardData,
      { timeout: 120000 } // 120 seconds = 2 minutes (ƒë·ªß cho update nhi·ªÅu ads)
    );
    return response.data;
  } catch (error) {
    // Rethrow original axios error to preserve error.response (including error_user_msg)
    throw handleError(error);
  }
};

/**
 * üíæ L∆∞u nh√°p campaign/adset/ad
 */
export const saveDraft = async (data) => {
  try {
    const response = await axiosInstance.post('/api/ads-wizard/save-draft', data);
    return response.data;
  } catch (error) {
    console.error('Error saving draft:', error);
    throw handleError(error);
  }
};

// X·ª≠ l√Ω l·ªói chu·∫©n cho service
function handleError(error) {
  return error;
}